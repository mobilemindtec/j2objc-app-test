//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/ClassUtil.java
//

#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface AppBaseClassUtil ()

+ (void)getAnnotatedsFieldsWithIOSClass:(IOSClass *)clazz
                           withIOSClass:(IOSClass *)annotation
                       withJavaUtilList:(id<JavaUtilList>)items;

+ (void)getAllFieldsWithIOSClass:(IOSClass *)clazz
                withJavaUtilList:(id<JavaUtilList>)list;

@end

__attribute__((unused)) static void AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(IOSClass *clazz, IOSClass *annotation, id<JavaUtilList> items);

__attribute__((unused)) static void AppBaseClassUtil_getAllFieldsWithIOSClass_withJavaUtilList_(IOSClass *clazz, id<JavaUtilList> list);

@implementation AppBaseClassUtil

+ (jint)GET_METHOD {
  return AppBaseClassUtil_GET_METHOD;
}

+ (jint)SET_METHOD {
  return AppBaseClassUtil_SET_METHOD;
}

+ (jint)ANY_METHOD {
  return AppBaseClassUtil_ANY_METHOD;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AppBaseClassUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isAssignableFromWithIOSClass:(IOSClass *)source
                            withIOSClass:(IOSClass *)assigned {
  return AppBaseClassUtil_isAssignableFromWithIOSClass_withIOSClass_(source, assigned);
}

+ (jboolean)isStringWithId:(id)o {
  return AppBaseClassUtil_isStringWithId_(o);
}

+ (jboolean)isIntegerWithId:(id)o {
  return AppBaseClassUtil_isIntegerWithId_(o);
}

+ (jboolean)isDoubleWithId:(id)o {
  return AppBaseClassUtil_isDoubleWithId_(o);
}

+ (jboolean)isLongWithId:(id)o {
  return AppBaseClassUtil_isLongWithId_(o);
}

+ (jboolean)isBooleanWithId:(id)o {
  return AppBaseClassUtil_isBooleanWithId_(o);
}

+ (jboolean)isDateWithId:(id)o {
  return AppBaseClassUtil_isDateWithId_(o);
}

+ (jboolean)isByteArrayWithId:(id)o {
  return AppBaseClassUtil_isByteArrayWithId_(o);
}

+ (id<JavaUtilList>)getAnnotatedsFieldsWithIOSClass:(IOSClass *)clazz
                                       withIOSClass:(IOSClass *)annotation {
  return AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_(clazz, annotation);
}

+ (JavaLangReflectField *)getAnnotatedFieldWithIOSClass:(IOSClass *)clazz
                                           withIOSClass:(IOSClass *)annotation
                                           withNSString:(NSString *)field {
  return AppBaseClassUtil_getAnnotatedFieldWithIOSClass_withIOSClass_withNSString_(clazz, annotation, field);
}

+ (void)getAnnotatedsFieldsWithIOSClass:(IOSClass *)clazz
                           withIOSClass:(IOSClass *)annotation
                       withJavaUtilList:(id<JavaUtilList>)items {
  AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(clazz, annotation, items);
}

+ (id<JavaUtilList>)getAllFieldsWithIOSClass:(IOSClass *)clazz {
  return AppBaseClassUtil_getAllFieldsWithIOSClass_(clazz);
}

+ (JavaLangReflectField *)getFieldWithIOSClass:(IOSClass *)clazz
                                  withNSString:(NSString *)fieldName {
  return AppBaseClassUtil_getFieldWithIOSClass_withNSString_(clazz, fieldName);
}

+ (void)getAllFieldsWithIOSClass:(IOSClass *)clazz
                withJavaUtilList:(id<JavaUtilList>)list {
  AppBaseClassUtil_getAllFieldsWithIOSClass_withJavaUtilList_(clazz, list);
}

+ (id<JavaUtilList>)getAllBeanMethodsWithIOSClass:(IOSClass *)clazz
                                          withInt:(jint)type {
  return AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withInt_(clazz, type);
}

+ (void)getAllBeanMethodsWithIOSClass:(IOSClass *)clazz
                     withJavaUtilList:(id<JavaUtilList>)list
                              withInt:(jint)type {
  AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withJavaUtilList_withInt_(clazz, list, type);
}

+ (jboolean)isCompatibleMethodsWithNSString:(NSString *)methodGet
                               withNSString:(NSString *)methodSet {
  return AppBaseClassUtil_isCompatibleMethodsWithNSString_withNSString_(methodGet, methodSet);
}

+ (jboolean)isSetMethodWithNSString:(NSString *)method {
  return AppBaseClassUtil_isSetMethodWithNSString_(method);
}

+ (jboolean)isGetMethodWithNSString:(NSString *)method {
  return AppBaseClassUtil_isGetMethodWithNSString_(method);
}

+ (JavaLangReflectMethod *)getGetMethodWithNSString:(NSString *)fieldName
                                       withIOSClass:(IOSClass *)clazz {
  return AppBaseClassUtil_getGetMethodWithNSString_withIOSClass_(fieldName, clazz);
}

+ (JavaLangReflectMethod *)getGetMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)setMethod
                                  withJavaLangReflectMethodArray:(IOSObjectArray *)ms {
  return AppBaseClassUtil_getGetMethodWithJavaLangReflectMethod_withJavaLangReflectMethodArray_(setMethod, ms);
}

+ (JavaLangReflectMethod *)getSetMethodWithNSString:(NSString *)fieldName
                                       withIOSClass:(IOSClass *)clazz {
  return AppBaseClassUtil_getSetMethodWithNSString_withIOSClass_(fieldName, clazz);
}

+ (JavaLangReflectMethod *)getSetMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)getMethod
                                                withJavaUtilList:(id<JavaUtilList>)ms {
  return AppBaseClassUtil_getSetMethodWithJavaLangReflectMethod_withJavaUtilList_(getMethod, ms);
}

+ (jboolean)isPrimitiveWithId:(id)obj {
  return AppBaseClassUtil_isPrimitiveWithId_(obj);
}

+ (NSString *)getTypeNameWithIOSClass:(IOSClass *)type {
  return AppBaseClassUtil_getTypeNameWithIOSClass_(type);
}

+ (IOSObjectArray *)getColumnsFrooModelWithIOSClass:(IOSClass *)modelClass
                                  withNSStringArray:(IOSObjectArray *)ignoreFields {
  return AppBaseClassUtil_getColumnsFrooModelWithIOSClass_withNSStringArray_(modelClass, ignoreFields);
}

+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)v {
  return AppBaseClassUtil_containsWithNSObjectArray_withId_(array, v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 9, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x29, 10, 1, -1, 11, -1, -1 },
    { NULL, "LJavaLangReflectField;", 0x29, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x2a, 10, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x29, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaLangReflectField;", 0x29, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2a, 17, 22, -1, 23, -1, -1 },
    { NULL, "LJavaUtilList;", 0x29, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x29, 24, 27, -1, 28, -1, -1 },
    { NULL, "Z", 0x9, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 33, 32, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x9, 34, 36, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x9, 37, 35, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x9, 37, 38, -1, 39, -1, -1 },
    { NULL, "Z", 0x9, 40, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 41, 18, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 42, 43, 44, -1, -1, -1 },
    { NULL, "Z", 0x9, 45, 46, -1, 47, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isAssignableFromWithIOSClass:withIOSClass:);
  methods[2].selector = @selector(isStringWithId:);
  methods[3].selector = @selector(isIntegerWithId:);
  methods[4].selector = @selector(isDoubleWithId:);
  methods[5].selector = @selector(isLongWithId:);
  methods[6].selector = @selector(isBooleanWithId:);
  methods[7].selector = @selector(isDateWithId:);
  methods[8].selector = @selector(isByteArrayWithId:);
  methods[9].selector = @selector(getAnnotatedsFieldsWithIOSClass:withIOSClass:);
  methods[10].selector = @selector(getAnnotatedFieldWithIOSClass:withIOSClass:withNSString:);
  methods[11].selector = @selector(getAnnotatedsFieldsWithIOSClass:withIOSClass:withJavaUtilList:);
  methods[12].selector = @selector(getAllFieldsWithIOSClass:);
  methods[13].selector = @selector(getFieldWithIOSClass:withNSString:);
  methods[14].selector = @selector(getAllFieldsWithIOSClass:withJavaUtilList:);
  methods[15].selector = @selector(getAllBeanMethodsWithIOSClass:withInt:);
  methods[16].selector = @selector(getAllBeanMethodsWithIOSClass:withJavaUtilList:withInt:);
  methods[17].selector = @selector(isCompatibleMethodsWithNSString:withNSString:);
  methods[18].selector = @selector(isSetMethodWithNSString:);
  methods[19].selector = @selector(isGetMethodWithNSString:);
  methods[20].selector = @selector(getGetMethodWithNSString:withIOSClass:);
  methods[21].selector = @selector(getGetMethodWithJavaLangReflectMethod:withJavaLangReflectMethodArray:);
  methods[22].selector = @selector(getSetMethodWithNSString:withIOSClass:);
  methods[23].selector = @selector(getSetMethodWithJavaLangReflectMethod:withJavaUtilList:);
  methods[24].selector = @selector(isPrimitiveWithId:);
  methods[25].selector = @selector(getTypeNameWithIOSClass:);
  methods[26].selector = @selector(getColumnsFrooModelWithIOSClass:withNSStringArray:);
  methods[27].selector = @selector(containsWithNSObjectArray:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GET_METHOD", "I", .constantValue.asInt = AppBaseClassUtil_GET_METHOD, 0x19, -1, -1, -1, -1 },
    { "SET_METHOD", "I", .constantValue.asInt = AppBaseClassUtil_SET_METHOD, 0x19, -1, -1, -1, -1 },
    { "ANY_METHOD", "I", .constantValue.asInt = AppBaseClassUtil_ANY_METHOD, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isAssignableFrom", "LIOSClass;LIOSClass;", "isString", "LNSObject;", "isInteger", "isDouble", "isLong", "isBoolean", "isDate", "isByteArray", "getAnnotatedsFields", "(Ljava/lang/Class;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Ljava/util/List<Ljava/lang/reflect/Field;>;", "getAnnotatedField", "LIOSClass;LIOSClass;LNSString;", "(Ljava/lang/Class;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/lang/String;)Ljava/lang/reflect/Field;", "LIOSClass;LIOSClass;LJavaUtilList;", "(Ljava/lang/Class;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List;)V", "getAllFields", "LIOSClass;", "(Ljava/lang/Class;)Ljava/util/List<Ljava/lang/reflect/Field;>;", "getField", "LIOSClass;LNSString;", "LIOSClass;LJavaUtilList;", "(Ljava/lang/Class;Ljava/util/List<Ljava/lang/reflect/Field;>;)V", "getAllBeanMethods", "LIOSClass;I", "(Ljava/lang/Class;I)Ljava/util/List<Ljava/lang/reflect/Method;>;", "LIOSClass;LJavaUtilList;I", "(Ljava/lang/Class;Ljava/util/List<Ljava/lang/reflect/Method;>;I)V", "isCompatibleMethods", "LNSString;LNSString;", "isSetMethod", "LNSString;", "isGetMethod", "getGetMethod", "LNSString;LIOSClass;", "LJavaLangReflectMethod;[LJavaLangReflectMethod;", "getSetMethod", "LJavaLangReflectMethod;LJavaUtilList;", "(Ljava/lang/reflect/Method;Ljava/util/List<Ljava/lang/reflect/Method;>;)Ljava/lang/reflect/Method;", "isPrimitive", "getTypeName", "getColumnsFrooModel", "LIOSClass;[LNSString;", "LJavaLangException;", "contains", "[LNSObject;LNSObject;", "<T:Ljava/lang/Object;>([TT;TT;)Z" };
  static const J2ObjcClassInfo _AppBaseClassUtil = { "ClassUtil", "br.com.mobilemind.j2objc.util", ptrTable, methods, fields, 7, 0x1, 28, 3, -1, -1, -1, -1, -1 };
  return &_AppBaseClassUtil;
}

@end

void AppBaseClassUtil_init(AppBaseClassUtil *self) {
  NSObject_init(self);
}

AppBaseClassUtil *new_AppBaseClassUtil_init() {
  J2OBJC_NEW_IMPL(AppBaseClassUtil, init)
}

AppBaseClassUtil *create_AppBaseClassUtil_init() {
  J2OBJC_CREATE_IMPL(AppBaseClassUtil, init)
}

jboolean AppBaseClassUtil_isAssignableFromWithIOSClass_withIOSClass_(IOSClass *source, IOSClass *assigned) {
  AppBaseClassUtil_initialize();
  if (source == nil) {
    return false;
  }
  if (source == assigned) {
    return true;
  }
  IOSObjectArray *interfaces = [source getInterfaces];
  if (![source isEqual:NSObject_class_()]) {
    if (AppBaseClassUtil_isAssignableFromWithIOSClass_withIOSClass_([source getSuperclass], assigned)) {
      return true;
    }
  }
  {
    IOSObjectArray *a__ = interfaces;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *c = *b__++;
      if (c == assigned) {
        return true;
      }
    }
  }
  return false;
}

jboolean AppBaseClassUtil_isStringWithId_(id o) {
  AppBaseClassUtil_initialize();
  if ([o isKindOfClass:[IOSClass class]]) {
    return o == NSString_class_();
  }
  return [o isKindOfClass:[NSString class]];
}

jboolean AppBaseClassUtil_isIntegerWithId_(id o) {
  AppBaseClassUtil_initialize();
  if (o == nil) {
    return false;
  }
  if (!([o isKindOfClass:[IOSClass class]])) {
    o = [o java_getClass];
  }
  return o == JavaLangInteger_class_() || o == JreLoadStatic(JavaLangInteger, TYPE);
}

jboolean AppBaseClassUtil_isDoubleWithId_(id o) {
  AppBaseClassUtil_initialize();
  if (o == nil) {
    return false;
  }
  if (!([o isKindOfClass:[IOSClass class]])) {
    o = [o java_getClass];
  }
  return o == JavaLangDouble_class_() || o == JreLoadStatic(JavaLangDouble, TYPE);
}

jboolean AppBaseClassUtil_isLongWithId_(id o) {
  AppBaseClassUtil_initialize();
  if (o == nil) {
    return false;
  }
  if (!([o isKindOfClass:[IOSClass class]])) {
    o = [o java_getClass];
  }
  return o == JavaLangLong_class_() || o == JreLoadStatic(JavaLangLong, TYPE);
}

jboolean AppBaseClassUtil_isBooleanWithId_(id o) {
  AppBaseClassUtil_initialize();
  if (o == nil) {
    return false;
  }
  if (!([o isKindOfClass:[IOSClass class]])) {
    o = [o java_getClass];
  }
  return o == JavaLangBoolean_class_() || o == JreLoadStatic(JavaLangBoolean, TYPE);
}

jboolean AppBaseClassUtil_isDateWithId_(id o) {
  AppBaseClassUtil_initialize();
  if (o == nil) {
    return false;
  }
  if (!([o isKindOfClass:[IOSClass class]])) {
    o = [o java_getClass];
  }
  return o == JavaUtilDate_class_();
}

jboolean AppBaseClassUtil_isByteArrayWithId_(id o) {
  AppBaseClassUtil_initialize();
  if ([IOSClass_byteArray(1) isEqual:o]) {
    return true;
  }
  return [o isKindOfClass:[IOSByteArray class]];
}

id<JavaUtilList> AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_(IOSClass *clazz, IOSClass *annotation) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    id<JavaUtilList> fields = new_JavaUtilLinkedList_init();
    AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(clazz, annotation, fields);
    return fields;
  }
}

JavaLangReflectField *AppBaseClassUtil_getAnnotatedFieldWithIOSClass_withIOSClass_withNSString_(IOSClass *clazz, IOSClass *annotation, NSString *field) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    id<JavaUtilList> fields = new_JavaUtilArrayList_init();
    AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(clazz, annotation, fields);
    for (JavaLangReflectField * __strong t in fields) {
      if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(t)) getName])) isEqual:field]) {
        return t;
      }
    }
    return nil;
  }
}

void AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(IOSClass *clazz, IOSClass *annotation, id<JavaUtilList> items) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    id<JavaLangAnnotationAnnotation> field;
    IOSObjectArray *fls = [((IOSClass *) nil_chk(clazz)) getDeclaredFields];
    {
      IOSObjectArray *a__ = fls;
      JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *f = *b__++;
        field = [((JavaLangReflectField *) nil_chk(f)) getAnnotationWithIOSClass:annotation];
        if (field != nil) {
          [((id<JavaUtilList>) nil_chk(items)) addWithId:f];
        }
      }
    }
    IOSObjectArray *interfaces = [clazz getInterfaces];
    {
      IOSObjectArray *a__ = interfaces;
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *c = *b__++;
        AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(c, annotation, items);
      }
    }
    IOSClass *superClass = [clazz getSuperclass];
    if (superClass != nil && superClass != NSObject_class_()) {
      AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_withJavaUtilList_(superClass, annotation, items);
    }
  }
}

id<JavaUtilList> AppBaseClassUtil_getAllFieldsWithIOSClass_(IOSClass *clazz) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    id<JavaUtilList> list = new_JavaUtilArrayList_init();
    AppBaseClassUtil_getAllFieldsWithIOSClass_withJavaUtilList_(clazz, list);
    return list;
  }
}

JavaLangReflectField *AppBaseClassUtil_getFieldWithIOSClass_withNSString_(IOSClass *clazz, NSString *fieldName) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    id<JavaUtilList> list = new_JavaUtilArrayList_init();
    AppBaseClassUtil_getAllFieldsWithIOSClass_withJavaUtilList_(clazz, list);
    for (JavaLangReflectField * __strong field in list) {
      if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(field)) getName])) isEqual:fieldName]) {
        return field;
      }
    }
    return nil;
  }
}

void AppBaseClassUtil_getAllFieldsWithIOSClass_withJavaUtilList_(IOSClass *clazz, id<JavaUtilList> list) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    IOSObjectArray *fls = [((IOSClass *) nil_chk(clazz)) getDeclaredFields];
    {
      IOSObjectArray *a__ = fls;
      JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *f = *b__++;
        [((id<JavaUtilList>) nil_chk(list)) addWithId:f];
      }
    }
    IOSClass *superClass = [clazz getSuperclass];
    if (superClass != nil && superClass != NSObject_class_()) {
      AppBaseClassUtil_getAllFieldsWithIOSClass_withJavaUtilList_(superClass, list);
    }
  }
}

id<JavaUtilList> AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withInt_(IOSClass *clazz, jint type) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    id<JavaUtilList> list = new_JavaUtilArrayList_init();
    AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withJavaUtilList_withInt_(clazz, list, type);
    return list;
  }
}

void AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withJavaUtilList_withInt_(IOSClass *clazz, id<JavaUtilList> list, jint type) {
  AppBaseClassUtil_initialize();
  @synchronized(AppBaseClassUtil_class_()) {
    IOSObjectArray *fls = [((IOSClass *) nil_chk(clazz)) getDeclaredMethods];
    {
      IOSObjectArray *a__ = fls;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *f = *b__++;
        if (AppBaseClassUtil_GET_METHOD == type) {
          if (![((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(f)) getName])) java_hasPrefix:@"get"] && ![((NSString *) nil_chk([f getName])) java_hasPrefix:@"is"]) {
            continue;
          }
        }
        else if (AppBaseClassUtil_SET_METHOD == type) {
          if (![((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(f)) getName])) java_hasPrefix:@"set"]) {
            continue;
          }
        }
        [((id<JavaUtilList>) nil_chk(list)) addWithId:f];
      }
    }
    IOSClass *superClass = [clazz getSuperclass];
    if (superClass != nil && superClass != NSObject_class_()) {
      AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withJavaUtilList_withInt_(superClass, list, type);
    }
  }
}

jboolean AppBaseClassUtil_isCompatibleMethodsWithNSString_withNSString_(NSString *methodGet, NSString *methodSet) {
  AppBaseClassUtil_initialize();
  methodGet = [((NSString *) nil_chk(methodGet)) java_hasPrefix:@"get"] ? [methodGet java_substring:3 endIndex:[methodGet java_length]] : [methodGet java_substring:2 endIndex:[methodGet java_length]];
  methodSet = [((NSString *) nil_chk(methodSet)) java_substring:3 endIndex:[methodSet java_length]];
  if (![methodGet isEqual:methodSet]) {
    return false;
  }
  return true;
}

jboolean AppBaseClassUtil_isSetMethodWithNSString_(NSString *method) {
  AppBaseClassUtil_initialize();
  return [((NSString *) nil_chk(method)) java_hasPrefix:@"set"];
}

jboolean AppBaseClassUtil_isGetMethodWithNSString_(NSString *method) {
  AppBaseClassUtil_initialize();
  return [((NSString *) nil_chk(method)) java_hasPrefix:@"get"] || [method java_hasPrefix:@"is"];
}

JavaLangReflectMethod *AppBaseClassUtil_getGetMethodWithNSString_withIOSClass_(NSString *fieldName, IOSClass *clazz) {
  AppBaseClassUtil_initialize();
  JavaLangReflectField *field = AppBaseClassUtil_getFieldWithIOSClass_withNSString_(clazz, fieldName);
  if (field == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$C", @"field [", fieldName, @"] not found in class [", [((IOSClass *) nil_chk(clazz)) getName], ']'));
  }
  NSString *method = JreStrcat("$$$", @"get", [((NSString *) nil_chk(JavaLangCharacter_toStringWithChar_([((NSString *) nil_chk(fieldName)) charAtWithInt:0]))) uppercaseString], [fieldName java_substring:1]);
  @try {
    return [((IOSClass *) nil_chk(clazz)) getDeclaredMethod:method parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$C", @"method [", method, @"] not found in class [", [clazz getName], ']'));
  }
}

JavaLangReflectMethod *AppBaseClassUtil_getGetMethodWithJavaLangReflectMethod_withJavaLangReflectMethodArray_(JavaLangReflectMethod *setMethod, IOSObjectArray *ms) {
  AppBaseClassUtil_initialize();
  {
    IOSObjectArray *a__ = ms;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if (AppBaseClassUtil_isCompatibleMethodsWithNSString_withNSString_([((JavaLangReflectMethod *) nil_chk(method)) getName], [((JavaLangReflectMethod *) nil_chk(setMethod)) getName])) {
        return method;
      }
    }
  }
  return nil;
}

JavaLangReflectMethod *AppBaseClassUtil_getSetMethodWithNSString_withIOSClass_(NSString *fieldName, IOSClass *clazz) {
  AppBaseClassUtil_initialize();
  JavaLangReflectField *field = AppBaseClassUtil_getFieldWithIOSClass_withNSString_(clazz, fieldName);
  if (field == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$C", @"field [", fieldName, @"] not found in class [", [((IOSClass *) nil_chk(clazz)) getName], ']'));
  }
  NSString *method = JreStrcat("$$$", @"set", [((NSString *) nil_chk(JavaLangCharacter_toStringWithChar_([((NSString *) nil_chk(fieldName)) charAtWithInt:0]))) uppercaseString], [fieldName java_substring:1]);
  @try {
    return [((IOSClass *) nil_chk(clazz)) getDeclaredMethod:method parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ [field getType] } count:1 type:IOSClass_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$C", @"method [", method, @"] not found in class [", [clazz getName], ']'));
  }
}

JavaLangReflectMethod *AppBaseClassUtil_getSetMethodWithJavaLangReflectMethod_withJavaUtilList_(JavaLangReflectMethod *getMethod, id<JavaUtilList> ms) {
  AppBaseClassUtil_initialize();
  for (JavaLangReflectMethod * __strong method in nil_chk(ms)) {
    if (AppBaseClassUtil_isCompatibleMethodsWithNSString_withNSString_([((JavaLangReflectMethod *) nil_chk(getMethod)) getName], [((JavaLangReflectMethod *) nil_chk(method)) getName])) {
      return method;
    }
  }
  return nil;
}

jboolean AppBaseClassUtil_isPrimitiveWithId_(id obj) {
  AppBaseClassUtil_initialize();
  return AppBaseClassUtil_isBooleanWithId_(obj) || AppBaseClassUtil_isDoubleWithId_(obj) || AppBaseClassUtil_isIntegerWithId_(obj) || AppBaseClassUtil_isLongWithId_(obj) || AppBaseClassUtil_isStringWithId_(obj);
}

NSString *AppBaseClassUtil_getTypeNameWithIOSClass_(IOSClass *type) {
  AppBaseClassUtil_initialize();
  if (AppBaseClassUtil_isStringWithId_(type)) {
    return @"string";
  }
  else if (AppBaseClassUtil_isLongWithId_(type)) {
    return @"long";
  }
  else if (AppBaseClassUtil_isBooleanWithId_(type)) {
    return @"boolean";
  }
  else if (AppBaseClassUtil_isIntegerWithId_(type)) {
    return @"int";
  }
  else if (AppBaseClassUtil_isDoubleWithId_(type)) {
    return @"double";
  }
  else if (AppBaseClassUtil_isDateWithId_(type)) {
    return @"date";
  }
  return nil;
}

IOSObjectArray *AppBaseClassUtil_getColumnsFrooModelWithIOSClass_withNSStringArray_(IOSClass *modelClass, IOSObjectArray *ignoreFields) {
  AppBaseClassUtil_initialize();
  id<JavaUtilList> fields = AppBaseClassUtil_getAllFieldsWithIOSClass_(modelClass);
  IOSObjectArray *items = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(fields)) size] type:NSObject_class_()];
  jint i = 0;
  for (JavaLangReflectField * __strong it in fields) {
    NSString *name = [((JavaLangReflectField *) nil_chk(it)) getName];
    if (AppBaseClassUtil_containsWithNSObjectArray_withId_(ignoreFields, name)) continue;
    IOSClass *type = [it getType];
    NSString *typeName = AppBaseClassUtil_getTypeNameWithIOSClass_(type);
    (void) IOSObjectArray_Set(items, i++, JreStrcat("$C$", name, '#', typeName));
  }
  return items;
}

jboolean AppBaseClassUtil_containsWithNSObjectArray_withId_(IOSObjectArray *array, id v) {
  AppBaseClassUtil_initialize();
  if (v == nil) {
    {
      IOSObjectArray *a__ = array;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id e = *b__++;
        if (e == nil) return true;
      }
    }
  }
  else {
    {
      IOSObjectArray *a__ = array;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id e = *b__++;
        if (e == v || [v isEqual:e]) return true;
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseClassUtil)

J2OBJC_NAME_MAPPING(AppBaseClassUtil, "br.com.mobilemind.j2objc.util", "AppBase")
