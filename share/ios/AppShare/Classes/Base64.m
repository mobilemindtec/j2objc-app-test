//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Base64.java
//

#include "Base64.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FilterInputStream.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamClass.h"
#include "java/io/OutputStream.h"
#include "java/io/Serializable.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/util/zip/GZIPInputStream.h"
#include "java/util/zip/GZIPOutputStream.h"

@interface AppBaseBase64 ()

+ (IOSByteArray *)getAlphabetWithInt:(jint)options;

+ (IOSByteArray *)getDecodabetWithInt:(jint)options;

- (instancetype)init;

+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)b4
                            withByteArray:(IOSByteArray *)threeBytes
                                  withInt:(jint)numSigBytes
                                  withInt:(jint)options;

+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)source
                                  withInt:(jint)srcOffset
                                  withInt:(jint)numSigBytes
                            withByteArray:(IOSByteArray *)destination
                                  withInt:(jint)destOffset
                                  withInt:(jint)options;

+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset
                        withInt:(jint)options;

@end

inline jint AppBaseBase64_get_MAX_LINE_LENGTH(void);
#define AppBaseBase64_MAX_LINE_LENGTH 76
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, MAX_LINE_LENGTH, jint)

inline jbyte AppBaseBase64_get_EQUALS_SIGN(void);
#define AppBaseBase64_EQUALS_SIGN 61
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, EQUALS_SIGN, jbyte)

inline jbyte AppBaseBase64_get_NEW_LINE(void);
#define AppBaseBase64_NEW_LINE 10
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, NEW_LINE, jbyte)

inline NSString *AppBaseBase64_get_PREFERRED_ENCODING(void);
static NSString *AppBaseBase64_PREFERRED_ENCODING = @"US-ASCII";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, PREFERRED_ENCODING, NSString *)

inline jbyte AppBaseBase64_get_WHITE_SPACE_ENC(void);
#define AppBaseBase64_WHITE_SPACE_ENC -5
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, WHITE_SPACE_ENC, jbyte)

inline jbyte AppBaseBase64_get_EQUALS_SIGN_ENC(void);
#define AppBaseBase64_EQUALS_SIGN_ENC -1
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, EQUALS_SIGN_ENC, jbyte)

inline IOSByteArray *AppBaseBase64_get__STANDARD_ALPHABET(void);
static IOSByteArray *AppBaseBase64__STANDARD_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, _STANDARD_ALPHABET, IOSByteArray *)

inline IOSByteArray *AppBaseBase64_get__STANDARD_DECODABET(void);
static IOSByteArray *AppBaseBase64__STANDARD_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, _STANDARD_DECODABET, IOSByteArray *)

inline IOSByteArray *AppBaseBase64_get__URL_SAFE_ALPHABET(void);
static IOSByteArray *AppBaseBase64__URL_SAFE_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, _URL_SAFE_ALPHABET, IOSByteArray *)

inline IOSByteArray *AppBaseBase64_get__URL_SAFE_DECODABET(void);
static IOSByteArray *AppBaseBase64__URL_SAFE_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, _URL_SAFE_DECODABET, IOSByteArray *)

inline IOSByteArray *AppBaseBase64_get__ORDERED_ALPHABET(void);
static IOSByteArray *AppBaseBase64__ORDERED_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, _ORDERED_ALPHABET, IOSByteArray *)

inline IOSByteArray *AppBaseBase64_get__ORDERED_DECODABET(void);
static IOSByteArray *AppBaseBase64__ORDERED_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AppBaseBase64, _ORDERED_DECODABET, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *AppBaseBase64_getAlphabetWithInt_(jint options);

__attribute__((unused)) static IOSByteArray *AppBaseBase64_getDecodabetWithInt_(jint options);

__attribute__((unused)) static void AppBaseBase64_init(AppBaseBase64 *self);

__attribute__((unused)) static AppBaseBase64 *new_AppBaseBase64_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AppBaseBase64 *create_AppBaseBase64_init(void);

__attribute__((unused)) static IOSByteArray *AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(IOSByteArray *b4, IOSByteArray *threeBytes, jint numSigBytes, jint options);

__attribute__((unused)) static IOSByteArray *AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, jint numSigBytes, IOSByteArray *destination, jint destOffset, jint options);

__attribute__((unused)) static jint AppBaseBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, IOSByteArray *destination, jint destOffset, jint options);

@interface AppBaseBase64_1 : JavaIoObjectInputStream {
 @public
  JavaLangClassLoader *val$loader_;
}

- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)capture$0
                      withJavaIoInputStream:(JavaIoInputStream *)x0;

- (IOSClass *)resolveClassWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)streamClass;

@end

J2OBJC_EMPTY_STATIC_INIT(AppBaseBase64_1)

__attribute__((unused)) static void AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(AppBaseBase64_1 *self, JavaLangClassLoader *capture$0, JavaIoInputStream *x0);

__attribute__((unused)) static AppBaseBase64_1 *new_AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(JavaLangClassLoader *capture$0, JavaIoInputStream *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AppBaseBase64_1 *create_AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(JavaLangClassLoader *capture$0, JavaIoInputStream *x0);

@interface AppBaseBase64_InputStream () {
 @public
  jboolean encode_;
  jint position_;
  IOSByteArray *buffer_;
  jint bufferLength_;
  jint numSigBytes_;
  jint lineLength_;
  jboolean breakLines_;
  jint options_;
  IOSByteArray *decodabet_;
}

@end

J2OBJC_FIELD_SETTER(AppBaseBase64_InputStream, buffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AppBaseBase64_InputStream, decodabet_, IOSByteArray *)

@interface AppBaseBase64_OutputStream () {
 @public
  jboolean encode_;
  jint position_;
  IOSByteArray *buffer_;
  jint bufferLength_;
  jint lineLength_;
  jboolean breakLines_;
  IOSByteArray *b4_;
  jboolean suspendEncoding_;
  jint options_;
  IOSByteArray *decodabet_;
}

@end

J2OBJC_FIELD_SETTER(AppBaseBase64_OutputStream, buffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AppBaseBase64_OutputStream, b4_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AppBaseBase64_OutputStream, decodabet_, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(AppBaseBase64)

@implementation AppBaseBase64

+ (jint)NO_OPTIONS {
  return AppBaseBase64_NO_OPTIONS;
}

+ (jint)ENCODE {
  return AppBaseBase64_ENCODE;
}

+ (jint)DECODE {
  return AppBaseBase64_DECODE;
}

+ (jint)GZIP {
  return AppBaseBase64_GZIP;
}

+ (jint)DONT_GUNZIP {
  return AppBaseBase64_DONT_GUNZIP;
}

+ (jint)DO_BREAK_LINES {
  return AppBaseBase64_DO_BREAK_LINES;
}

+ (jint)URL_SAFE {
  return AppBaseBase64_URL_SAFE;
}

+ (jint)ORDERED {
  return AppBaseBase64_ORDERED;
}

+ (IOSByteArray *)getAlphabetWithInt:(jint)options {
  return AppBaseBase64_getAlphabetWithInt_(options);
}

+ (IOSByteArray *)getDecodabetWithInt:(jint)options {
  return AppBaseBase64_getDecodabetWithInt_(options);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AppBaseBase64_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)b4
                            withByteArray:(IOSByteArray *)threeBytes
                                  withInt:(jint)numSigBytes
                                  withInt:(jint)options {
  return AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(b4, threeBytes, numSigBytes, options);
}

+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)source
                                  withInt:(jint)srcOffset
                                  withInt:(jint)numSigBytes
                            withByteArray:(IOSByteArray *)destination
                                  withInt:(jint)destOffset
                                  withInt:(jint)options {
  return AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(source, srcOffset, numSigBytes, destination, destOffset, options);
}

+ (void)encodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)raw
              withJavaNioByteBuffer:(JavaNioByteBuffer *)encoded {
  AppBaseBase64_encodeWithJavaNioByteBuffer_withJavaNioByteBuffer_(raw, encoded);
}

+ (void)encodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)raw
              withJavaNioCharBuffer:(JavaNioCharBuffer *)encoded {
  AppBaseBase64_encodeWithJavaNioByteBuffer_withJavaNioCharBuffer_(raw, encoded);
}

+ (NSString *)encodeObjectWithJavaIoSerializable:(id<JavaIoSerializable>)serializableObject {
  return AppBaseBase64_encodeObjectWithJavaIoSerializable_(serializableObject);
}

+ (NSString *)encodeObjectWithJavaIoSerializable:(id<JavaIoSerializable>)serializableObject
                                         withInt:(jint)options {
  return AppBaseBase64_encodeObjectWithJavaIoSerializable_withInt_(serializableObject, options);
}

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source {
  return AppBaseBase64_encodeBytesWithByteArray_(source);
}

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)options {
  return AppBaseBase64_encodeBytesWithByteArray_withInt_(source, options);
}

+ (NSString *)encodeBytesGzipWithByteArray:(IOSByteArray *)source {
  return AppBaseBase64_encodeBytesGzipWithByteArray_(source);
}

+ (NSString *)encodeWithNSString:(NSString *)s {
  return AppBaseBase64_encodeWithNSString_(s);
}

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len {
  return AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_(source, off, len);
}

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len
                               withInt:(jint)options {
  return AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, off, len, options);
}

+ (IOSByteArray *)encodeBytesToBytesWithByteArray:(IOSByteArray *)source {
  return AppBaseBase64_encodeBytesToBytesWithByteArray_(source);
}

+ (IOSByteArray *)encodeBytesToBytesWithByteArray:(IOSByteArray *)source
                                          withInt:(jint)off
                                          withInt:(jint)len
                                          withInt:(jint)options {
  return AppBaseBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(source, off, len, options);
}

+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset
                        withInt:(jint)options {
  return AppBaseBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(source, srcOffset, destination, destOffset, options);
}

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source {
  return AppBaseBase64_decodeWithByteArray_(source);
}

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len
                              withInt:(jint)options {
  return AppBaseBase64_decodeWithByteArray_withInt_withInt_withInt_(source, off, len, options);
}

+ (IOSByteArray *)decodeWithNSString:(NSString *)s {
  return AppBaseBase64_decodeWithNSString_(s);
}

+ (IOSByteArray *)decodeGzipWithNSString:(NSString *)s {
  return AppBaseBase64_decodeGzipWithNSString_(s);
}

+ (IOSByteArray *)decodeWithNSString:(NSString *)s
                             withInt:(jint)options {
  return AppBaseBase64_decodeWithNSString_withInt_(s, options);
}

+ (id)decodeToObjectWithNSString:(NSString *)encodedObject {
  return AppBaseBase64_decodeToObjectWithNSString_(encodedObject);
}

+ (id)decodeToObjectWithNSString:(NSString *)encodedObject
                         withInt:(jint)options
         withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AppBaseBase64_decodeToObjectWithNSString_withInt_withJavaLangClassLoader_(encodedObject, options, loader);
}

+ (void)encodeToFileWithByteArray:(IOSByteArray *)dataToEncode
                     withNSString:(NSString *)filename {
  AppBaseBase64_encodeToFileWithByteArray_withNSString_(dataToEncode, filename);
}

+ (void)decodeToFileWithNSString:(NSString *)dataToDecode
                    withNSString:(NSString *)filename {
  AppBaseBase64_decodeToFileWithNSString_withNSString_(dataToDecode, filename);
}

+ (IOSByteArray *)decodeFromFileWithNSString:(NSString *)filename {
  return AppBaseBase64_decodeFromFileWithNSString_(filename);
}

+ (NSString *)encodeFromFileWithNSString:(NSString *)filename {
  return AppBaseBase64_encodeFromFileWithNSString_(filename);
}

+ (void)encodeFileToFileWithNSString:(NSString *)infile
                        withNSString:(NSString *)outfile {
  AppBaseBase64_encodeFileToFileWithNSString_withNSString_(infile, outfile);
}

+ (void)decodeFileToFileWithNSString:(NSString *)infile
                        withNSString:(NSString *)outfile {
  AppBaseBase64_decodeFileToFileWithNSString_withNSString_(infile, outfile);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x1a, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1a, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 10, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 12, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 15, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 14, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 17, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 19, 11, -1, -1, -1 },
    { NULL, "[B", 0x9, 20, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 20, 19, 11, -1, -1, -1 },
    { NULL, "I", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 23, 14, 11, -1, -1, -1 },
    { NULL, "[B", 0x9, 23, 19, 11, -1, -1, -1 },
    { NULL, "[B", 0x9, 23, 17, 11, -1, -1, -1 },
    { NULL, "[B", 0x9, 24, 17, 11, -1, -1, -1 },
    { NULL, "[B", 0x9, 23, 25, 11, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 26, 17, 27, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 26, 28, 27, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 30, 11, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 32, 11, -1, -1, -1 },
    { NULL, "[B", 0x9, 33, 17, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 34, 17, 11, -1, -1, -1 },
    { NULL, "V", 0x9, 35, 32, 11, -1, -1, -1 },
    { NULL, "V", 0x9, 36, 32, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAlphabetWithInt:);
  methods[1].selector = @selector(getDecodabetWithInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(encode3to4WithByteArray:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(encode3to4WithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[5].selector = @selector(encodeWithJavaNioByteBuffer:withJavaNioByteBuffer:);
  methods[6].selector = @selector(encodeWithJavaNioByteBuffer:withJavaNioCharBuffer:);
  methods[7].selector = @selector(encodeObjectWithJavaIoSerializable:);
  methods[8].selector = @selector(encodeObjectWithJavaIoSerializable:withInt:);
  methods[9].selector = @selector(encodeBytesWithByteArray:);
  methods[10].selector = @selector(encodeBytesWithByteArray:withInt:);
  methods[11].selector = @selector(encodeBytesGzipWithByteArray:);
  methods[12].selector = @selector(encodeWithNSString:);
  methods[13].selector = @selector(encodeBytesWithByteArray:withInt:withInt:);
  methods[14].selector = @selector(encodeBytesWithByteArray:withInt:withInt:withInt:);
  methods[15].selector = @selector(encodeBytesToBytesWithByteArray:);
  methods[16].selector = @selector(encodeBytesToBytesWithByteArray:withInt:withInt:withInt:);
  methods[17].selector = @selector(decode4to3WithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[18].selector = @selector(decodeWithByteArray:);
  methods[19].selector = @selector(decodeWithByteArray:withInt:withInt:withInt:);
  methods[20].selector = @selector(decodeWithNSString:);
  methods[21].selector = @selector(decodeGzipWithNSString:);
  methods[22].selector = @selector(decodeWithNSString:withInt:);
  methods[23].selector = @selector(decodeToObjectWithNSString:);
  methods[24].selector = @selector(decodeToObjectWithNSString:withInt:withJavaLangClassLoader:);
  methods[25].selector = @selector(encodeToFileWithByteArray:withNSString:);
  methods[26].selector = @selector(decodeToFileWithNSString:withNSString:);
  methods[27].selector = @selector(decodeFromFileWithNSString:);
  methods[28].selector = @selector(encodeFromFileWithNSString:);
  methods[29].selector = @selector(encodeFileToFileWithNSString:withNSString:);
  methods[30].selector = @selector(decodeFileToFileWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OPTIONS", "I", .constantValue.asInt = AppBaseBase64_NO_OPTIONS, 0x19, -1, -1, -1, -1 },
    { "ENCODE", "I", .constantValue.asInt = AppBaseBase64_ENCODE, 0x19, -1, -1, -1, -1 },
    { "DECODE", "I", .constantValue.asInt = AppBaseBase64_DECODE, 0x19, -1, -1, -1, -1 },
    { "GZIP", "I", .constantValue.asInt = AppBaseBase64_GZIP, 0x19, -1, -1, -1, -1 },
    { "DONT_GUNZIP", "I", .constantValue.asInt = AppBaseBase64_DONT_GUNZIP, 0x19, -1, -1, -1, -1 },
    { "DO_BREAK_LINES", "I", .constantValue.asInt = AppBaseBase64_DO_BREAK_LINES, 0x19, -1, -1, -1, -1 },
    { "URL_SAFE", "I", .constantValue.asInt = AppBaseBase64_URL_SAFE, 0x19, -1, -1, -1, -1 },
    { "ORDERED", "I", .constantValue.asInt = AppBaseBase64_ORDERED, 0x19, -1, -1, -1, -1 },
    { "MAX_LINE_LENGTH", "I", .constantValue.asInt = AppBaseBase64_MAX_LINE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "EQUALS_SIGN", "B", .constantValue.asChar = AppBaseBase64_EQUALS_SIGN, 0x1a, -1, -1, -1, -1 },
    { "NEW_LINE", "B", .constantValue.asChar = AppBaseBase64_NEW_LINE, 0x1a, -1, -1, -1, -1 },
    { "PREFERRED_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "WHITE_SPACE_ENC", "B", .constantValue.asChar = AppBaseBase64_WHITE_SPACE_ENC, 0x1a, -1, -1, -1, -1 },
    { "EQUALS_SIGN_ENC", "B", .constantValue.asChar = AppBaseBase64_EQUALS_SIGN_ENC, 0x1a, -1, -1, -1, -1 },
    { "_STANDARD_ALPHABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "_STANDARD_DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "_URL_SAFE_ALPHABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "_URL_SAFE_DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "_ORDERED_ALPHABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "_ORDERED_DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
  };
  static const void *ptrTable[] = { "getAlphabet", "I", "getDecodabet", "encode3to4", "[B[BII", "[BII[BII", "encode", "LJavaNioByteBuffer;LJavaNioByteBuffer;", "LJavaNioByteBuffer;LJavaNioCharBuffer;", "encodeObject", "LJavaIoSerializable;", "LJavaIoIOException;", "LJavaIoSerializable;I", "encodeBytes", "[B", "[BI", "encodeBytesGzip", "LNSString;", "[BII", "[BIII", "encodeBytesToBytes", "decode4to3", "[BI[BII", "decode", "decodeGzip", "LNSString;I", "decodeToObject", "LJavaIoIOException;LJavaLangClassNotFoundException;", "LNSString;ILJavaLangClassLoader;", "encodeToFile", "[BLNSString;", "decodeToFile", "LNSString;LNSString;", "decodeFromFile", "encodeFromFile", "encodeFileToFile", "decodeFileToFile", &AppBaseBase64_PREFERRED_ENCODING, &AppBaseBase64__STANDARD_ALPHABET, &AppBaseBase64__STANDARD_DECODABET, &AppBaseBase64__URL_SAFE_ALPHABET, &AppBaseBase64__URL_SAFE_DECODABET, &AppBaseBase64__ORDERED_ALPHABET, &AppBaseBase64__ORDERED_DECODABET, "LAppBaseBase64_InputStream;LAppBaseBase64_OutputStream;" };
  static const J2ObjcClassInfo _AppBaseBase64 = { "Base64", "br.com.mobilemind.j2objc.util", ptrTable, methods, fields, 7, 0x1, 31, 20, -1, 44, -1, -1, -1 };
  return &_AppBaseBase64;
}

+ (void)initialize {
  if (self == [AppBaseBase64 class]) {
    AppBaseBase64__STANDARD_ALPHABET = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n', (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z', (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64];
    AppBaseBase64__STANDARD_DECODABET = [IOSByteArray newArrayWithBytes:(jbyte[]){ -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, -9, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 } count:256];
    AppBaseBase64__URL_SAFE_ALPHABET = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n', (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z', (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '-', (jbyte) '_' } count:64];
    AppBaseBase64__URL_SAFE_DECODABET = [IOSByteArray newArrayWithBytes:(jbyte[]){ -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, 63, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 } count:256];
    AppBaseBase64__ORDERED_ALPHABET = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) '-', (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z', (jbyte) '_', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n', (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z' } count:64];
    AppBaseBase64__ORDERED_DECODABET = [IOSByteArray newArrayWithBytes:(jbyte[]){ -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 0, -9, -9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -9, -9, -9, -1, -9, -9, -9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, -9, -9, -9, -9, 37, -9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 } count:257];
    J2OBJC_SET_INITIALIZED(AppBaseBase64)
  }
}

@end

IOSByteArray *AppBaseBase64_getAlphabetWithInt_(jint options) {
  AppBaseBase64_initialize();
  if ((options & AppBaseBase64_URL_SAFE) == AppBaseBase64_URL_SAFE) {
    return AppBaseBase64__URL_SAFE_ALPHABET;
  }
  else if ((options & AppBaseBase64_ORDERED) == AppBaseBase64_ORDERED) {
    return AppBaseBase64__ORDERED_ALPHABET;
  }
  else {
    return AppBaseBase64__STANDARD_ALPHABET;
  }
}

IOSByteArray *AppBaseBase64_getDecodabetWithInt_(jint options) {
  AppBaseBase64_initialize();
  if ((options & AppBaseBase64_URL_SAFE) == AppBaseBase64_URL_SAFE) {
    return AppBaseBase64__URL_SAFE_DECODABET;
  }
  else if ((options & AppBaseBase64_ORDERED) == AppBaseBase64_ORDERED) {
    return AppBaseBase64__ORDERED_DECODABET;
  }
  else {
    return AppBaseBase64__STANDARD_DECODABET;
  }
}

void AppBaseBase64_init(AppBaseBase64 *self) {
  NSObject_init(self);
}

AppBaseBase64 *new_AppBaseBase64_init() {
  J2OBJC_NEW_IMPL(AppBaseBase64, init)
}

AppBaseBase64 *create_AppBaseBase64_init() {
  J2OBJC_CREATE_IMPL(AppBaseBase64, init)
}

IOSByteArray *AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(IOSByteArray *b4, IOSByteArray *threeBytes, jint numSigBytes, jint options) {
  AppBaseBase64_initialize();
  (void) AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(threeBytes, 0, numSigBytes, b4, 0, options);
  return b4;
}

IOSByteArray *AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, jint numSigBytes, IOSByteArray *destination, jint destOffset, jint options) {
  AppBaseBase64_initialize();
  IOSByteArray *ALPHABET = AppBaseBase64_getAlphabetWithInt_(options);
  jint inBuff = (numSigBytes > 0 ? (JreURShift32((JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset), 24)), 8)) : 0) | (numSigBytes > 1 ? (JreURShift32((JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 1), 24)), 16)) : 0) | (numSigBytes > 2 ? (JreURShift32((JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 2), 24)), 24)) : 0);
  switch (numSigBytes) {
    case 3:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(ALPHABET), (JreURShift32(inBuff, 18)));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(ALPHABET, (JreURShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = IOSByteArray_Get(ALPHABET, (JreURShift32(inBuff, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 3) = IOSByteArray_Get(ALPHABET, (inBuff) & (jint) 0x3f);
    return destination;
    case 2:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(ALPHABET), (JreURShift32(inBuff, 18)));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(ALPHABET, (JreURShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = IOSByteArray_Get(ALPHABET, (JreURShift32(inBuff, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 3) = AppBaseBase64_EQUALS_SIGN;
    return destination;
    case 1:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(ALPHABET), (JreURShift32(inBuff, 18)));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(ALPHABET, (JreURShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = AppBaseBase64_EQUALS_SIGN;
    *IOSByteArray_GetRef(destination, destOffset + 3) = AppBaseBase64_EQUALS_SIGN;
    return destination;
    default:
    return destination;
  }
}

void AppBaseBase64_encodeWithJavaNioByteBuffer_withJavaNioByteBuffer_(JavaNioByteBuffer *raw, JavaNioByteBuffer *encoded) {
  AppBaseBase64_initialize();
  IOSByteArray *raw3 = [IOSByteArray newArrayWithLength:3];
  IOSByteArray *enc4 = [IOSByteArray newArrayWithLength:4];
  while ([((JavaNioByteBuffer *) nil_chk(raw)) hasRemaining]) {
    jint rem = JavaLangMath_minWithInt_withInt_(3, [raw remaining]);
    (void) [raw getWithByteArray:raw3 withInt:0 withInt:rem];
    (void) AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(enc4, raw3, rem, AppBaseBase64_NO_OPTIONS);
    (void) [((JavaNioByteBuffer *) nil_chk(encoded)) putWithByteArray:enc4];
  }
}

void AppBaseBase64_encodeWithJavaNioByteBuffer_withJavaNioCharBuffer_(JavaNioByteBuffer *raw, JavaNioCharBuffer *encoded) {
  AppBaseBase64_initialize();
  IOSByteArray *raw3 = [IOSByteArray newArrayWithLength:3];
  IOSByteArray *enc4 = [IOSByteArray newArrayWithLength:4];
  while ([((JavaNioByteBuffer *) nil_chk(raw)) hasRemaining]) {
    jint rem = JavaLangMath_minWithInt_withInt_(3, [raw remaining]);
    (void) [raw getWithByteArray:raw3 withInt:0 withInt:rem];
    (void) AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(enc4, raw3, rem, AppBaseBase64_NO_OPTIONS);
    for (jint i = 0; i < 4; i++) {
      (void) [((JavaNioCharBuffer *) nil_chk(encoded)) putWithChar:(jchar) (IOSByteArray_Get(enc4, i) & (jint) 0xFF)];
    }
  }
}

NSString *AppBaseBase64_encodeObjectWithJavaIoSerializable_(id<JavaIoSerializable> serializableObject) {
  AppBaseBase64_initialize();
  return AppBaseBase64_encodeObjectWithJavaIoSerializable_withInt_(serializableObject, AppBaseBase64_NO_OPTIONS);
}

NSString *AppBaseBase64_encodeObjectWithJavaIoSerializable_withInt_(id<JavaIoSerializable> serializableObject, jint options) {
  AppBaseBase64_initialize();
  if (serializableObject == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Cannot serialize a null object.");
  }
  JavaIoByteArrayOutputStream *baos = nil;
  JavaIoOutputStream *b64os = nil;
  JavaUtilZipGZIPOutputStream *gzos = nil;
  JavaIoObjectOutputStream *oos = nil;
  @try {
    baos = new_JavaIoByteArrayOutputStream_init();
    b64os = new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(baos, AppBaseBase64_ENCODE | options);
    if ((options & AppBaseBase64_GZIP) != 0) {
      gzos = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(b64os);
      oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(gzos);
    }
    else {
      oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(b64os);
    }
    [oos writeObjectWithId:serializableObject];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((JavaIoObjectOutputStream *) nil_chk(oos)) close];
    }
    @catch (JavaLangException *e) {
    }
    @try {
      [((JavaUtilZipGZIPOutputStream *) nil_chk(gzos)) close];
    }
    @catch (JavaLangException *e) {
    }
    @try {
      [((JavaIoOutputStream *) nil_chk(b64os)) close];
    }
    @catch (JavaLangException *e) {
    }
    @try {
      [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
  @try {
    return [NSString java_stringWithBytes:[baos toByteArray] charsetName:AppBaseBase64_PREFERRED_ENCODING];
  }
  @catch (JavaIoUnsupportedEncodingException *uue) {
    return [NSString java_stringWithBytes:[baos toByteArray]];
  }
}

NSString *AppBaseBase64_encodeBytesWithByteArray_(IOSByteArray *source) {
  AppBaseBase64_initialize();
  NSString *encoded = nil;
  @try {
    encoded = AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, AppBaseBase64_NO_OPTIONS);
  }
  @catch (JavaIoIOException *ex) {
    JreAssert(false, [ex getMessage]);
  }
  JreAssert(encoded != nil, @"br/com/mobilemind/j2objc/util/Base64.java:697 condition failed: assert encoded != null;");
  return encoded;
}

NSString *AppBaseBase64_encodeBytesWithByteArray_withInt_(IOSByteArray *source, jint options) {
  AppBaseBase64_initialize();
  return AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, options);
}

NSString *AppBaseBase64_encodeBytesGzipWithByteArray_(IOSByteArray *source) {
  AppBaseBase64_initialize();
  return AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, AppBaseBase64_GZIP);
}

NSString *AppBaseBase64_encodeWithNSString_(NSString *s) {
  AppBaseBase64_initialize();
  return AppBaseBase64_encodeBytesWithByteArray_withInt_([((NSString *) nil_chk(s)) java_getBytes], AppBaseBase64_NO_OPTIONS);
}

NSString *AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_(IOSByteArray *source, jint off, jint len) {
  AppBaseBase64_initialize();
  NSString *encoded = nil;
  @try {
    encoded = AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, off, len, AppBaseBase64_NO_OPTIONS);
  }
  @catch (JavaIoIOException *ex) {
    JreAssert(false, [ex getMessage]);
  }
  JreAssert(encoded != nil, @"br/com/mobilemind/j2objc/util/Base64.java:770 condition failed: assert encoded != null;");
  return encoded;
}

NSString *AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options) {
  AppBaseBase64_initialize();
  IOSByteArray *encoded = AppBaseBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(source, off, len, options);
  @try {
    return [NSString java_stringWithBytes:encoded charsetName:AppBaseBase64_PREFERRED_ENCODING];
  }
  @catch (JavaIoUnsupportedEncodingException *uue) {
    return [NSString java_stringWithBytes:encoded];
  }
}

IOSByteArray *AppBaseBase64_encodeBytesToBytesWithByteArray_(IOSByteArray *source) {
  AppBaseBase64_initialize();
  IOSByteArray *encoded = nil;
  @try {
    encoded = AppBaseBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, AppBaseBase64_NO_OPTIONS);
  }
  @catch (JavaIoIOException *ex) {
    JreAssert(false, JreStrcat("$$", @"IOExceptions only come from GZipping, which is turned off: ", [ex getMessage]));
  }
  return encoded;
}

IOSByteArray *AppBaseBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options) {
  AppBaseBase64_initialize();
  if (source == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Cannot serialize a null array.");
  }
  if (off < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Cannot have negative offset: ", off));
  }
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Cannot have length offset: ", len));
  }
  if (off + len > source->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot have offset of %d and length of %d with array of length %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(off), JavaLangInteger_valueOfWithInt_(len), JavaLangInteger_valueOfWithInt_(source->size_) } count:3 type:NSObject_class_()]));
  }
  if ((options & AppBaseBase64_GZIP) != 0) {
    JavaIoByteArrayOutputStream *baos = nil;
    JavaUtilZipGZIPOutputStream *gzos = nil;
    AppBaseBase64_OutputStream *b64os = nil;
    @try {
      baos = new_JavaIoByteArrayOutputStream_init();
      b64os = new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(baos, AppBaseBase64_ENCODE | options);
      gzos = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(b64os);
      [gzos writeWithByteArray:source withInt:off withInt:len];
      [gzos close];
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
    @finally {
      @try {
        [((JavaUtilZipGZIPOutputStream *) nil_chk(gzos)) close];
      }
      @catch (JavaLangException *e) {
      }
      @try {
        [((AppBaseBase64_OutputStream *) nil_chk(b64os)) close];
      }
      @catch (JavaLangException *e) {
      }
      @try {
        [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
      }
      @catch (JavaLangException *e) {
      }
    }
    return [baos toByteArray];
  }
  else {
    jboolean breakLines = (options & AppBaseBase64_DO_BREAK_LINES) != 0;
    jint encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);
    if (breakLines) {
      encLen += encLen / AppBaseBase64_MAX_LINE_LENGTH;
    }
    IOSByteArray *outBuff = [IOSByteArray newArrayWithLength:encLen];
    jint d = 0;
    jint e = 0;
    jint len2 = len - 2;
    jint lineLength = 0;
    for (; d < len2; d += 3, e += 4) {
      (void) AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(source, d + off, 3, outBuff, e, options);
      lineLength += 4;
      if (breakLines && lineLength >= AppBaseBase64_MAX_LINE_LENGTH) {
        *IOSByteArray_GetRef(outBuff, e + 4) = AppBaseBase64_NEW_LINE;
        e++;
        lineLength = 0;
      }
    }
    if (d < len) {
      (void) AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(source, d + off, len - d, outBuff, e, options);
      e += 4;
    }
    if (e <= outBuff->size_ - 1) {
      IOSByteArray *finalOut = [IOSByteArray newArrayWithLength:e];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuff, 0, finalOut, 0, e);
      return finalOut;
    }
    else {
      return outBuff;
    }
  }
}

jint AppBaseBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, IOSByteArray *destination, jint destOffset, jint options) {
  AppBaseBase64_initialize();
  if (source == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Source array was null.");
  }
  if (destination == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Destination array was null.");
  }
  if (srcOffset < 0 || srcOffset + 3 >= source->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Source array with length %d cannot have offset of %d and still process four bytes.", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(source->size_), JavaLangInteger_valueOfWithInt_(srcOffset) } count:2 type:NSObject_class_()]));
  }
  if (destOffset < 0 || destOffset + 2 >= destination->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Destination array with length %d cannot have offset of %d and still store three bytes.", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(destination->size_), JavaLangInteger_valueOfWithInt_(destOffset) } count:2 type:NSObject_class_()]));
  }
  IOSByteArray *DECODABET = AppBaseBase64_getDecodabetWithInt_(options);
  if (IOSByteArray_Get(source, srcOffset + 2) == AppBaseBase64_EQUALS_SIGN) {
    jint outBuff = (JreLShift32((IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) | (JreLShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12));
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreURShift32(outBuff, 16));
    return 1;
  }
  else if (IOSByteArray_Get(source, srcOffset + 3) == AppBaseBase64_EQUALS_SIGN) {
    jint outBuff = (JreLShift32((IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) | (JreLShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12)) | (JreLShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 2)) & (jint) 0xFF), 6));
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreURShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset + 1) = (jbyte) (JreURShift32(outBuff, 8));
    return 2;
  }
  else {
    jint outBuff = (JreLShift32((IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) | (JreLShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12)) | (JreLShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 2)) & (jint) 0xFF), 6)) | ((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 3)) & (jint) 0xFF));
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreRShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset + 1) = (jbyte) (JreRShift32(outBuff, 8));
    *IOSByteArray_GetRef(destination, destOffset + 2) = (jbyte) (outBuff);
    return 3;
  }
}

IOSByteArray *AppBaseBase64_decodeWithByteArray_(IOSByteArray *source) {
  AppBaseBase64_initialize();
  IOSByteArray *decoded = nil;
  decoded = AppBaseBase64_decodeWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, AppBaseBase64_NO_OPTIONS);
  return decoded;
}

IOSByteArray *AppBaseBase64_decodeWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options) {
  AppBaseBase64_initialize();
  if (source == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Cannot decode null source array.");
  }
  if (off < 0 || off + len > source->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Source array with length %d cannot have offset of %d and process %d bytes.", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(source->size_), JavaLangInteger_valueOfWithInt_(off), JavaLangInteger_valueOfWithInt_(len) } count:3 type:NSObject_class_()]));
  }
  if (len == 0) {
    return [IOSByteArray newArrayWithLength:0];
  }
  else if (len < 4) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Base64-encoded string must have at least four characters, but length specified was ", len));
  }
  IOSByteArray *DECODABET = AppBaseBase64_getDecodabetWithInt_(options);
  jint len34 = len * 3 / 4;
  IOSByteArray *outBuff = [IOSByteArray newArrayWithLength:len34];
  jint outBuffPosn = 0;
  IOSByteArray *b4 = [IOSByteArray newArrayWithLength:4];
  jint b4Posn = 0;
  jint i = 0;
  jbyte sbiDecode = 0;
  for (i = off; i < off + len; i++) {
    sbiDecode = IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, i) & (jint) 0xFF);
    if (sbiDecode >= AppBaseBase64_WHITE_SPACE_ENC) {
      if (sbiDecode >= AppBaseBase64_EQUALS_SIGN_ENC) {
        *IOSByteArray_GetRef(b4, b4Posn++) = IOSByteArray_Get(source, i);
        if (b4Posn > 3) {
          outBuffPosn += AppBaseBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(b4, 0, outBuff, outBuffPosn, options);
          b4Posn = 0;
          if (IOSByteArray_Get(source, i) == AppBaseBase64_EQUALS_SIGN) {
            break;
          }
        }
      }
    }
    else {
      @throw new_JavaIoIOException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Bad Base64 input character decimal %d in array position %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(((jint) IOSByteArray_Get(source, i)) & (jint) 0xFF), JavaLangInteger_valueOfWithInt_(i) } count:2 type:NSObject_class_()]));
    }
  }
  IOSByteArray *out = [IOSByteArray newArrayWithLength:outBuffPosn];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuff, 0, out, 0, outBuffPosn);
  return out;
}

IOSByteArray *AppBaseBase64_decodeWithNSString_(NSString *s) {
  AppBaseBase64_initialize();
  return AppBaseBase64_decodeWithNSString_withInt_(s, AppBaseBase64_NO_OPTIONS);
}

IOSByteArray *AppBaseBase64_decodeGzipWithNSString_(NSString *s) {
  AppBaseBase64_initialize();
  return AppBaseBase64_decodeWithNSString_withInt_(s, AppBaseBase64_GZIP);
}

IOSByteArray *AppBaseBase64_decodeWithNSString_withInt_(NSString *s, jint options) {
  AppBaseBase64_initialize();
  if (s == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Input string was null.");
  }
  IOSByteArray *bytes;
  @try {
    bytes = [s java_getBytesWithCharsetName:AppBaseBase64_PREFERRED_ENCODING];
  }
  @catch (JavaIoUnsupportedEncodingException *uee) {
    bytes = [s java_getBytes];
  }
  bytes = AppBaseBase64_decodeWithByteArray_withInt_withInt_withInt_(bytes, 0, ((IOSByteArray *) nil_chk(bytes))->size_, options);
  jboolean dontGunzip = (options & AppBaseBase64_DONT_GUNZIP) != 0;
  if ((bytes != nil) && (((IOSByteArray *) nil_chk(bytes))->size_ >= 4) && (!dontGunzip)) {
    jint head = ((jint) IOSByteArray_Get(nil_chk(bytes), 0) & (jint) 0xff) | ((JreLShift32(IOSByteArray_Get(bytes, 1), 8)) & (jint) 0xff00);
    if (JavaUtilZipGZIPInputStream_GZIP_MAGIC == head) {
      JavaIoByteArrayInputStream *bais = nil;
      JavaUtilZipGZIPInputStream *gzis = nil;
      JavaIoByteArrayOutputStream *baos = nil;
      IOSByteArray *buffer = [IOSByteArray newArrayWithLength:2048];
      jint length = 0;
      @try {
        baos = new_JavaIoByteArrayOutputStream_init();
        bais = new_JavaIoByteArrayInputStream_initWithByteArray_(bytes);
        gzis = new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(bais);
        while ((length = [gzis readWithByteArray:buffer]) >= 0) {
          [baos writeWithByteArray:buffer withInt:0 withInt:length];
        }
        bytes = [baos toByteArray];
      }
      @catch (JavaIoIOException *e) {
        [e printStackTrace];
      }
      @finally {
        @try {
          [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
        }
        @catch (JavaLangException *e) {
        }
        @try {
          [((JavaUtilZipGZIPInputStream *) nil_chk(gzis)) close];
        }
        @catch (JavaLangException *e) {
        }
        @try {
          [((JavaIoByteArrayInputStream *) nil_chk(bais)) close];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
  }
  return bytes;
}

id AppBaseBase64_decodeToObjectWithNSString_(NSString *encodedObject) {
  AppBaseBase64_initialize();
  return AppBaseBase64_decodeToObjectWithNSString_withInt_withJavaLangClassLoader_(encodedObject, AppBaseBase64_NO_OPTIONS, nil);
}

id AppBaseBase64_decodeToObjectWithNSString_withInt_withJavaLangClassLoader_(NSString *encodedObject, jint options, JavaLangClassLoader *loader) {
  AppBaseBase64_initialize();
  IOSByteArray *objBytes = AppBaseBase64_decodeWithNSString_withInt_(encodedObject, options);
  JavaIoByteArrayInputStream *bais = nil;
  JavaIoObjectInputStream *ois = nil;
  id obj = nil;
  @try {
    bais = new_JavaIoByteArrayInputStream_initWithByteArray_(objBytes);
    if (loader == nil) {
      ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(bais);
    }
    else {
      ois = new_AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(loader, bais);
    }
    obj = [ois readObject];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((JavaIoByteArrayInputStream *) nil_chk(bais)) close];
    }
    @catch (JavaLangException *e) {
    }
    @try {
      [((JavaIoObjectInputStream *) nil_chk(ois)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
  return obj;
}

void AppBaseBase64_encodeToFileWithByteArray_withNSString_(IOSByteArray *dataToEncode, NSString *filename) {
  AppBaseBase64_initialize();
  if (dataToEncode == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Data to encode was null.");
  }
  AppBaseBase64_OutputStream *bos = nil;
  @try {
    bos = new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(new_JavaIoFileOutputStream_initWithNSString_(filename), AppBaseBase64_ENCODE);
    [bos writeWithByteArray:dataToEncode];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((AppBaseBase64_OutputStream *) nil_chk(bos)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}

void AppBaseBase64_decodeToFileWithNSString_withNSString_(NSString *dataToDecode, NSString *filename) {
  AppBaseBase64_initialize();
  AppBaseBase64_OutputStream *bos = nil;
  @try {
    bos = new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(new_JavaIoFileOutputStream_initWithNSString_(filename), AppBaseBase64_DECODE);
    [bos writeWithByteArray:[((NSString *) nil_chk(dataToDecode)) java_getBytesWithCharsetName:AppBaseBase64_PREFERRED_ENCODING]];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((AppBaseBase64_OutputStream *) nil_chk(bos)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}

IOSByteArray *AppBaseBase64_decodeFromFileWithNSString_(NSString *filename) {
  AppBaseBase64_initialize();
  IOSByteArray *decodedData = nil;
  AppBaseBase64_InputStream *bis = nil;
  @try {
    JavaIoFile *file = new_JavaIoFile_initWithNSString_(filename);
    IOSByteArray *buffer = nil;
    jint length = 0;
    jint numBytes = 0;
    if ([file length] > JavaLangInteger_MAX_VALUE) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$J$", @"File is too big for this convenience method (", [file length], @" bytes)."));
    }
    buffer = [IOSByteArray newArrayWithLength:(jint) [file length]];
    bis = new_AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file)), AppBaseBase64_DECODE);
    while ((numBytes = [bis readWithByteArray:buffer withInt:length withInt:4096]) >= 0) {
      length += numBytes;
    }
    decodedData = [IOSByteArray newArrayWithLength:length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, decodedData, 0, length);
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((AppBaseBase64_InputStream *) nil_chk(bis)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
  return decodedData;
}

NSString *AppBaseBase64_encodeFromFileWithNSString_(NSString *filename) {
  AppBaseBase64_initialize();
  NSString *encodedData = nil;
  AppBaseBase64_InputStream *bis = nil;
  @try {
    JavaIoFile *file = new_JavaIoFile_initWithNSString_(filename);
    IOSByteArray *buffer = [IOSByteArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(JreFpToInt(([file length] * 1.4 + 1)), 40)];
    jint length = 0;
    jint numBytes = 0;
    bis = new_AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file)), AppBaseBase64_ENCODE);
    while ((numBytes = [bis readWithByteArray:buffer withInt:length withInt:4096]) >= 0) {
      length += numBytes;
    }
    encodedData = [NSString java_stringWithBytes:buffer offset:0 length:length charsetName:AppBaseBase64_PREFERRED_ENCODING];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((AppBaseBase64_InputStream *) nil_chk(bis)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
  return encodedData;
}

void AppBaseBase64_encodeFileToFileWithNSString_withNSString_(NSString *infile, NSString *outfile) {
  AppBaseBase64_initialize();
  NSString *encoded = AppBaseBase64_encodeFromFileWithNSString_(infile);
  JavaIoOutputStream *out = nil;
  @try {
    out = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outfile));
    [out writeWithByteArray:[((NSString *) nil_chk(encoded)) java_getBytesWithCharsetName:@"US-ASCII"]];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((JavaIoOutputStream *) nil_chk(out)) close];
    }
    @catch (JavaLangException *ex) {
    }
  }
}

void AppBaseBase64_decodeFileToFileWithNSString_withNSString_(NSString *infile, NSString *outfile) {
  AppBaseBase64_initialize();
  IOSByteArray *decoded = AppBaseBase64_decodeFromFileWithNSString_(infile);
  JavaIoOutputStream *out = nil;
  @try {
    out = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(outfile));
    [out writeWithByteArray:decoded];
  }
  @catch (JavaIoIOException *e) {
    @throw e;
  }
  @finally {
    @try {
      [((JavaIoOutputStream *) nil_chk(out)) close];
    }
    @catch (JavaLangException *ex) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseBase64)

J2OBJC_NAME_MAPPING(AppBaseBase64, "br.com.mobilemind.j2objc.util", "AppBase")

@implementation AppBaseBase64_1

- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)capture$0
                      withJavaIoInputStream:(JavaIoInputStream *)x0 {
  AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(self, capture$0, x0);
  return self;
}

- (IOSClass *)resolveClassWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)streamClass {
  IOSClass *c = IOSClass_forName_initialize_classLoader_([((JavaIoObjectStreamClass *) nil_chk(streamClass)) getName], false, val$loader_);
  if (c == nil) {
    return [super resolveClassWithJavaIoObjectStreamClass:streamClass];
  }
  else {
    return c;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 1, 2, 3, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangClassLoader:withJavaIoInputStream:);
  methods[1].selector = @selector(resolveClassWithJavaIoObjectStreamClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$loader_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "resolveClass", "LJavaIoObjectStreamClass;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "(Ljava/io/ObjectStreamClass;)Ljava/lang/Class<*>;", "LAppBaseBase64;", "decodeToObjectWithNSString:withInt:withJavaLangClassLoader:" };
  static const J2ObjcClassInfo _AppBaseBase64_1 = { "", "br.com.mobilemind.j2objc.util", ptrTable, methods, fields, 7, 0x8018, 2, 1, 5, -1, 6, -1, -1 };
  return &_AppBaseBase64_1;
}

@end

void AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(AppBaseBase64_1 *self, JavaLangClassLoader *capture$0, JavaIoInputStream *x0) {
  self->val$loader_ = capture$0;
  JavaIoObjectInputStream_initWithJavaIoInputStream_(self, x0);
}

AppBaseBase64_1 *new_AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(JavaLangClassLoader *capture$0, JavaIoInputStream *x0) {
  J2OBJC_NEW_IMPL(AppBaseBase64_1, initWithJavaLangClassLoader_withJavaIoInputStream_, capture$0, x0)
}

AppBaseBase64_1 *create_AppBaseBase64_1_initWithJavaLangClassLoader_withJavaIoInputStream_(JavaLangClassLoader *capture$0, JavaIoInputStream *x0) {
  J2OBJC_CREATE_IMPL(AppBaseBase64_1, initWithJavaLangClassLoader_withJavaIoInputStream_, capture$0, x0)
}

@implementation AppBaseBase64_InputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  AppBaseBase64_InputStream_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                  withInt:(jint)options {
  AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(self, inArg, options);
  return self;
}

- (jint)read {
  if (position_ < 0) {
    if (encode_) {
      IOSByteArray *b3 = [IOSByteArray newArrayWithLength:3];
      jint numBinaryBytes = 0;
      for (jint i = 0; i < 3; i++) {
        jint b = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
        if (b >= 0) {
          *IOSByteArray_GetRef(b3, i) = (jbyte) b;
          numBinaryBytes++;
        }
        else {
          break;
        }
      }
      if (numBinaryBytes > 0) {
        (void) AppBaseBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(b3, 0, numBinaryBytes, buffer_, 0, options_);
        position_ = 0;
        numSigBytes_ = 4;
      }
      else {
        return -1;
      }
    }
    else {
      IOSByteArray *b4 = [IOSByteArray newArrayWithLength:4];
      jint i = 0;
      for (i = 0; i < 4; i++) {
        jint b = 0;
        do {
          b = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
        }
        while (b >= 0 && IOSByteArray_Get(nil_chk(decodabet_), b & (jint) 0x7f) <= AppBaseBase64_WHITE_SPACE_ENC);
        if (b < 0) {
          break;
        }
        *IOSByteArray_GetRef(b4, i) = (jbyte) b;
      }
      if (i == 4) {
        numSigBytes_ = AppBaseBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(b4, 0, buffer_, 0, options_);
        position_ = 0;
      }
      else if (i == 0) {
        return -1;
      }
      else {
        @throw new_JavaIoIOException_initWithNSString_(@"Improperly padded Base64 input.");
      }
    }
  }
  if (position_ >= 0) {
    if (position_ >= numSigBytes_) {
      return -1;
    }
    if (encode_ && breakLines_ && lineLength_ >= AppBaseBase64_MAX_LINE_LENGTH) {
      lineLength_ = 0;
      return 0x000a;
    }
    else {
      lineLength_++;
      jint b = IOSByteArray_Get(nil_chk(buffer_), position_++);
      if (position_ >= bufferLength_) {
        position_ = -1;
      }
      return b & (jint) 0xFF;
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"Error in Base64 code reading stream.");
  }
}

- (jint)readWithByteArray:(IOSByteArray *)dest
                  withInt:(jint)off
                  withInt:(jint)len {
  jint i;
  jint b;
  for (i = 0; i < len; i++) {
    b = [self read];
    if (b >= 0) {
      *IOSByteArray_GetRef(nil_chk(dest), off + i) = (jbyte) b;
    }
    else if (i == 0) {
      return -1;
    }
    else {
      break;
    }
  }
  return i;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(initWithJavaIoInputStream:withInt:);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numSigBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lineLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "breakLines_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "options_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "decodabet_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoInputStream;I", "LJavaIoIOException;", "read", "[BII", "LAppBaseBase64;" };
  static const J2ObjcClassInfo _AppBaseBase64_InputStream = { "InputStream", "br.com.mobilemind.j2objc.util", ptrTable, methods, fields, 7, 0x9, 4, 9, 5, -1, -1, -1, -1 };
  return &_AppBaseBase64_InputStream;
}

@end

void AppBaseBase64_InputStream_initWithJavaIoInputStream_(AppBaseBase64_InputStream *self, JavaIoInputStream *inArg) {
  AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(self, inArg, AppBaseBase64_DECODE);
}

AppBaseBase64_InputStream *new_AppBaseBase64_InputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(AppBaseBase64_InputStream, initWithJavaIoInputStream_, inArg)
}

AppBaseBase64_InputStream *create_AppBaseBase64_InputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(AppBaseBase64_InputStream, initWithJavaIoInputStream_, inArg)
}

void AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(AppBaseBase64_InputStream *self, JavaIoInputStream *inArg, jint options) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, inArg);
  self->options_ = options;
  self->breakLines_ = ((options & AppBaseBase64_DO_BREAK_LINES) > 0);
  self->encode_ = ((options & AppBaseBase64_ENCODE) > 0);
  self->bufferLength_ = self->encode_ ? 4 : 3;
  self->buffer_ = [IOSByteArray newArrayWithLength:self->bufferLength_];
  self->position_ = -1;
  self->lineLength_ = 0;
  self->decodabet_ = AppBaseBase64_getDecodabetWithInt_(options);
}

AppBaseBase64_InputStream *new_AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint options) {
  J2OBJC_NEW_IMPL(AppBaseBase64_InputStream, initWithJavaIoInputStream_withInt_, inArg, options)
}

AppBaseBase64_InputStream *create_AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint options) {
  J2OBJC_CREATE_IMPL(AppBaseBase64_InputStream, initWithJavaIoInputStream_withInt_, inArg, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseBase64_InputStream)

@implementation AppBaseBase64_OutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(self, outArg);
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                   withInt:(jint)options {
  AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(self, outArg, options);
  return self;
}

- (void)writeWithInt:(jint)theByte {
  if (suspendEncoding_) {
    [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:theByte];
    return;
  }
  if (encode_) {
    *IOSByteArray_GetRef(nil_chk(buffer_), position_++) = (jbyte) theByte;
    if (position_ >= bufferLength_) {
      [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithByteArray:AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(b4_, buffer_, bufferLength_, options_)];
      lineLength_ += 4;
      if (breakLines_ && lineLength_ >= AppBaseBase64_MAX_LINE_LENGTH) {
        [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:AppBaseBase64_NEW_LINE];
        lineLength_ = 0;
      }
      position_ = 0;
    }
  }
  else {
    if (IOSByteArray_Get(nil_chk(decodabet_), theByte & (jint) 0x7f) > AppBaseBase64_WHITE_SPACE_ENC) {
      *IOSByteArray_GetRef(nil_chk(buffer_), position_++) = (jbyte) theByte;
      if (position_ >= bufferLength_) {
        jint len = AppBaseBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(buffer_, 0, b4_, 0, options_);
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:b4_ withInt:0 withInt:len];
        position_ = 0;
      }
    }
    else if (IOSByteArray_Get(decodabet_, theByte & (jint) 0x7f) != AppBaseBase64_WHITE_SPACE_ENC) {
      @throw new_JavaIoIOException_initWithNSString_(@"Invalid character in Base64 data.");
    }
  }
}

- (void)writeWithByteArray:(IOSByteArray *)theBytes
                   withInt:(jint)off
                   withInt:(jint)len {
  if (suspendEncoding_) {
    [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithByteArray:theBytes withInt:off withInt:len];
    return;
  }
  for (jint i = 0; i < len; i++) {
    [self writeWithInt:IOSByteArray_Get(nil_chk(theBytes), off + i)];
  }
}

- (void)flushBase64 {
  if (position_ > 0) {
    if (encode_) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:AppBaseBase64_encode3to4WithByteArray_withByteArray_withInt_withInt_(b4_, buffer_, position_, options_)];
      position_ = 0;
    }
    else {
      @throw new_JavaIoIOException_initWithNSString_(@"Base64 input not properly padded.");
    }
  }
}

- (void)close {
  [self flushBase64];
  [super close];
  buffer_ = nil;
  out_ = nil;
}

- (void)suspendEncoding {
  [self flushBase64];
  self->suspendEncoding_ = true;
}

- (void)resumeEncoding {
  self->suspendEncoding_ = false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(initWithJavaIoOutputStream:withInt:);
  methods[2].selector = @selector(writeWithInt:);
  methods[3].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(flushBase64);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(suspendEncoding);
  methods[7].selector = @selector(resumeEncoding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lineLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "breakLines_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "b4_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suspendEncoding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "options_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "decodabet_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "LJavaIoOutputStream;I", "write", "I", "LJavaIoIOException;", "[BII", "LAppBaseBase64;" };
  static const J2ObjcClassInfo _AppBaseBase64_OutputStream = { "OutputStream", "br.com.mobilemind.j2objc.util", ptrTable, methods, fields, 7, 0x9, 8, 10, 6, -1, -1, -1, -1 };
  return &_AppBaseBase64_OutputStream;
}

@end

void AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(AppBaseBase64_OutputStream *self, JavaIoOutputStream *outArg) {
  AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(self, outArg, AppBaseBase64_ENCODE);
}

AppBaseBase64_OutputStream *new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(AppBaseBase64_OutputStream, initWithJavaIoOutputStream_, outArg)
}

AppBaseBase64_OutputStream *create_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(AppBaseBase64_OutputStream, initWithJavaIoOutputStream_, outArg)
}

void AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(AppBaseBase64_OutputStream *self, JavaIoOutputStream *outArg, jint options) {
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, outArg);
  self->breakLines_ = ((options & AppBaseBase64_DO_BREAK_LINES) != 0);
  self->encode_ = ((options & AppBaseBase64_ENCODE) != 0);
  self->bufferLength_ = self->encode_ ? 3 : 4;
  self->buffer_ = [IOSByteArray newArrayWithLength:self->bufferLength_];
  self->position_ = 0;
  self->lineLength_ = 0;
  self->suspendEncoding_ = false;
  self->b4_ = [IOSByteArray newArrayWithLength:4];
  self->options_ = options;
  self->decodabet_ = AppBaseBase64_getDecodabetWithInt_(options);
}

AppBaseBase64_OutputStream *new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *outArg, jint options) {
  J2OBJC_NEW_IMPL(AppBaseBase64_OutputStream, initWithJavaIoOutputStream_withInt_, outArg, options)
}

AppBaseBase64_OutputStream *create_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *outArg, jint options) {
  J2OBJC_CREATE_IMPL(AppBaseBase64_OutputStream, initWithJavaIoOutputStream_withInt_, outArg, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseBase64_OutputStream)
