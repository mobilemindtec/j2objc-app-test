//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/NumberMask.java
//

#include "AppUtil.h"
#include "J2ObjC_source.h"
#include "NumberMask.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"

@implementation AppBaseNumberMask

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AppBaseNumberMask_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)applyWithNSString:(NSString *)text
                   withNSString:(NSString *)pattern {
  return AppBaseNumberMask_applyWithNSString_withNSString_(text, pattern);
}

+ (NSString *)applyReverseWithNSString:(NSString *)text
                          withNSString:(NSString *)pattern {
  return AppBaseNumberMask_applyReverseWithNSString_withNSString_(text, pattern);
}

+ (NSString *)unmaskWithNSString:(NSString *)text {
  return AppBaseNumberMask_unmaskWithNSString_(text);
}

+ (NSString *)documentoWithNSString:(NSString *)text {
  return AppBaseNumberMask_documentoWithNSString_(text);
}

+ (NSString *)cepWithNSString:(NSString *)text {
  return AppBaseNumberMask_cepWithNSString_(text);
}

+ (NSString *)telefoneWithNSString:(NSString *)text {
  return AppBaseNumberMask_telefoneWithNSString_(text);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithNSString:withNSString:);
  methods[2].selector = @selector(applyReverseWithNSString:withNSString:);
  methods[3].selector = @selector(unmaskWithNSString:);
  methods[4].selector = @selector(documentoWithNSString:);
  methods[5].selector = @selector(cepWithNSString:);
  methods[6].selector = @selector(telefoneWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LNSString;LNSString;", "applyReverse", "unmask", "LNSString;", "documento", "cep", "telefone" };
  static const J2ObjcClassInfo _AppBaseNumberMask = { "NumberMask", "br.com.mobilemind.j2objc.util", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_AppBaseNumberMask;
}

@end

void AppBaseNumberMask_init(AppBaseNumberMask *self) {
  NSObject_init(self);
}

AppBaseNumberMask *new_AppBaseNumberMask_init() {
  J2OBJC_NEW_IMPL(AppBaseNumberMask, init)
}

AppBaseNumberMask *create_AppBaseNumberMask_init() {
  J2OBJC_CREATE_IMPL(AppBaseNumberMask, init)
}

NSString *AppBaseNumberMask_applyWithNSString_withNSString_(NSString *text, NSString *pattern) {
  AppBaseNumberMask_initialize();
  if (text == nil || pattern == nil) return nil;
  NSString *numberPattern = @"/[0-9]/";
  text = AppBaseAppUtil_filterNumberWithNSString_(text);
  NSString *newText = @"";
  jint j = 0;
  for (jint i = 0; i < [pattern java_length]; i++) {
    JavaLangCharacter *m = JavaLangCharacter_valueOfWithChar_([pattern charAtWithInt:i]);
    if (j >= [((NSString *) nil_chk(text)) java_length]) {
      (void) JreStrAppendStrong(&newText, "$", [m description]);
      continue;
    }
    JavaLangCharacter *c = JavaLangCharacter_valueOfWithChar_([text charAtWithInt:j]);
    if ([((NSString *) nil_chk([c description])) java_matches:numberPattern]) {
      if ([((NSString *) nil_chk([m description])) java_matches:numberPattern]) {
        (void) JreStrAppendStrong(&newText, "$", [c description]);
        j++;
      }
      else {
        (void) JreStrAppendStrong(&newText, "$", [m description]);
      }
    }
  }
  return newText;
}

NSString *AppBaseNumberMask_applyReverseWithNSString_withNSString_(NSString *text, NSString *pattern) {
  AppBaseNumberMask_initialize();
  if (text == nil || pattern == nil) return nil;
  NSString *numberPattern = @"/[0-9]/";
  text = [((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(text) reverse])) description];
  NSString *newText = @"";
  jint j = 0;
  for (jint i = [pattern java_length]; i > 0; i--) {
    JavaLangCharacter *m = JavaLangCharacter_valueOfWithChar_([pattern charAtWithInt:i]);
    if (j >= [((NSString *) nil_chk(text)) java_length]) {
      (void) JreStrAppendStrong(&newText, "$", [m description]);
      continue;
    }
    JavaLangCharacter *c = JavaLangCharacter_valueOfWithChar_([text charAtWithInt:j]);
    if ([((NSString *) nil_chk([c description])) java_matches:numberPattern]) {
      if ([((NSString *) nil_chk([m description])) java_matches:numberPattern]) {
        (void) JreStrAppendStrong(&newText, "$", [c description]);
        j++;
      }
      else {
        (void) JreStrAppendStrong(&newText, "$", [m description]);
      }
    }
  }
  return [((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(newText) reverse])) description];
}

NSString *AppBaseNumberMask_unmaskWithNSString_(NSString *text) {
  AppBaseNumberMask_initialize();
  if (text == nil) return nil;
  return AppBaseAppUtil_filterNumberWithNSString_(text);
}

NSString *AppBaseNumberMask_documentoWithNSString_(NSString *text) {
  AppBaseNumberMask_initialize();
  if (text == nil) return nil;
  text = AppBaseAppUtil_filterNumberWithNSString_(text);
  if ([((NSString *) nil_chk(text)) java_length] == 11) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"999.999.999-99");
  if ([text java_length] == 14) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"99.999.999/9999-99");
  return nil;
}

NSString *AppBaseNumberMask_cepWithNSString_(NSString *text) {
  AppBaseNumberMask_initialize();
  if (text == nil) return nil;
  text = AppBaseAppUtil_filterNumberWithNSString_(text);
  if ([((NSString *) nil_chk(text)) java_length] == 8) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"99999-999");
  return nil;
}

NSString *AppBaseNumberMask_telefoneWithNSString_(NSString *text) {
  AppBaseNumberMask_initialize();
  if (text == nil) return nil;
  text = AppBaseAppUtil_filterNumberWithNSString_(text);
  if ([((NSString *) nil_chk(text)) java_length] == 9) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"999.999.999");
  if ([text java_length] == 8) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"9999.9999");
  if ([text java_length] == 10) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"(99) 9999.9999");
  if ([text java_length] == 11) return AppBaseNumberMask_applyWithNSString_withNSString_(text, @"(99) 999.999.999");
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseNumberMask)

J2OBJC_NAME_MAPPING(AppBaseNumberMask, "br.com.mobilemind.j2objc.util", "AppBase")
