//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Base64.java
//

#ifndef Base64_H
#define Base64_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/io/FilterInputStream.h"
#include "java/io/FilterOutputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangClassLoader;
@class JavaNioByteBuffer;
@class JavaNioCharBuffer;
@protocol JavaIoSerializable;

@interface AppBaseBase64 : NSObject
@property (readonly, class) jint NO_OPTIONS NS_SWIFT_NAME(NO_OPTIONS);
@property (readonly, class) jint ENCODE NS_SWIFT_NAME(ENCODE);
@property (readonly, class) jint DECODE NS_SWIFT_NAME(DECODE);
@property (readonly, class) jint GZIP NS_SWIFT_NAME(GZIP);
@property (readonly, class) jint DONT_GUNZIP NS_SWIFT_NAME(DONT_GUNZIP);
@property (readonly, class) jint DO_BREAK_LINES NS_SWIFT_NAME(DO_BREAK_LINES);
@property (readonly, class) jint URL_SAFE NS_SWIFT_NAME(URL_SAFE);
@property (readonly, class) jint ORDERED NS_SWIFT_NAME(ORDERED);

+ (jint)NO_OPTIONS;

+ (jint)ENCODE;

+ (jint)DECODE;

+ (jint)GZIP;

+ (jint)DONT_GUNZIP;

+ (jint)DO_BREAK_LINES;

+ (jint)URL_SAFE;

+ (jint)ORDERED;

#pragma mark Public

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source;

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len
                              withInt:(jint)options;

+ (IOSByteArray *)decodeWithNSString:(NSString *)s;

+ (IOSByteArray *)decodeWithNSString:(NSString *)s
                             withInt:(jint)options;

+ (void)decodeFileToFileWithNSString:(NSString *)infile
                        withNSString:(NSString *)outfile;

+ (IOSByteArray *)decodeFromFileWithNSString:(NSString *)filename;

+ (IOSByteArray *)decodeGzipWithNSString:(NSString *)s;

+ (void)decodeToFileWithNSString:(NSString *)dataToDecode
                    withNSString:(NSString *)filename;

+ (id)decodeToObjectWithNSString:(NSString *)encodedObject;

+ (id)decodeToObjectWithNSString:(NSString *)encodedObject
                         withInt:(jint)options
         withJavaLangClassLoader:(JavaLangClassLoader *)loader;

+ (void)encodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)raw
              withJavaNioByteBuffer:(JavaNioByteBuffer *)encoded;

+ (void)encodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)raw
              withJavaNioCharBuffer:(JavaNioCharBuffer *)encoded;

+ (NSString *)encodeWithNSString:(NSString *)s;

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source;

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)options;

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len;

+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len
                               withInt:(jint)options;

+ (NSString *)encodeBytesGzipWithByteArray:(IOSByteArray *)source;

+ (IOSByteArray *)encodeBytesToBytesWithByteArray:(IOSByteArray *)source;

+ (IOSByteArray *)encodeBytesToBytesWithByteArray:(IOSByteArray *)source
                                          withInt:(jint)off
                                          withInt:(jint)len
                                          withInt:(jint)options;

+ (void)encodeFileToFileWithNSString:(NSString *)infile
                        withNSString:(NSString *)outfile;

+ (NSString *)encodeFromFileWithNSString:(NSString *)filename;

+ (NSString *)encodeObjectWithJavaIoSerializable:(id<JavaIoSerializable>)serializableObject;

+ (NSString *)encodeObjectWithJavaIoSerializable:(id<JavaIoSerializable>)serializableObject
                                         withInt:(jint)options;

+ (void)encodeToFileWithByteArray:(IOSByteArray *)dataToEncode
                     withNSString:(NSString *)filename;

@end

J2OBJC_STATIC_INIT(AppBaseBase64)

inline jint AppBaseBase64_get_NO_OPTIONS(void);
#define AppBaseBase64_NO_OPTIONS 0
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, NO_OPTIONS, jint)

inline jint AppBaseBase64_get_ENCODE(void);
#define AppBaseBase64_ENCODE 1
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, ENCODE, jint)

inline jint AppBaseBase64_get_DECODE(void);
#define AppBaseBase64_DECODE 0
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, DECODE, jint)

inline jint AppBaseBase64_get_GZIP(void);
#define AppBaseBase64_GZIP 2
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, GZIP, jint)

inline jint AppBaseBase64_get_DONT_GUNZIP(void);
#define AppBaseBase64_DONT_GUNZIP 4
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, DONT_GUNZIP, jint)

inline jint AppBaseBase64_get_DO_BREAK_LINES(void);
#define AppBaseBase64_DO_BREAK_LINES 8
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, DO_BREAK_LINES, jint)

inline jint AppBaseBase64_get_URL_SAFE(void);
#define AppBaseBase64_URL_SAFE 16
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, URL_SAFE, jint)

inline jint AppBaseBase64_get_ORDERED(void);
#define AppBaseBase64_ORDERED 32
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseBase64, ORDERED, jint)

FOUNDATION_EXPORT void AppBaseBase64_encodeWithJavaNioByteBuffer_withJavaNioByteBuffer_(JavaNioByteBuffer *raw, JavaNioByteBuffer *encoded);

FOUNDATION_EXPORT void AppBaseBase64_encodeWithJavaNioByteBuffer_withJavaNioCharBuffer_(JavaNioByteBuffer *raw, JavaNioCharBuffer *encoded);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeObjectWithJavaIoSerializable_(id<JavaIoSerializable> serializableObject);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeObjectWithJavaIoSerializable_withInt_(id<JavaIoSerializable> serializableObject, jint options);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeBytesWithByteArray_(IOSByteArray *source);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeBytesWithByteArray_withInt_(IOSByteArray *source, jint options);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeBytesGzipWithByteArray_(IOSByteArray *source);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_(IOSByteArray *source, jint off, jint len);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_encodeBytesToBytesWithByteArray_(IOSByteArray *source);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_decodeWithByteArray_(IOSByteArray *source);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_decodeWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_decodeWithNSString_(NSString *s);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_decodeGzipWithNSString_(NSString *s);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_decodeWithNSString_withInt_(NSString *s, jint options);

FOUNDATION_EXPORT id AppBaseBase64_decodeToObjectWithNSString_(NSString *encodedObject);

FOUNDATION_EXPORT id AppBaseBase64_decodeToObjectWithNSString_withInt_withJavaLangClassLoader_(NSString *encodedObject, jint options, JavaLangClassLoader *loader);

FOUNDATION_EXPORT void AppBaseBase64_encodeToFileWithByteArray_withNSString_(IOSByteArray *dataToEncode, NSString *filename);

FOUNDATION_EXPORT void AppBaseBase64_decodeToFileWithNSString_withNSString_(NSString *dataToDecode, NSString *filename);

FOUNDATION_EXPORT IOSByteArray *AppBaseBase64_decodeFromFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT NSString *AppBaseBase64_encodeFromFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT void AppBaseBase64_encodeFileToFileWithNSString_withNSString_(NSString *infile, NSString *outfile);

FOUNDATION_EXPORT void AppBaseBase64_decodeFileToFileWithNSString_withNSString_(NSString *infile, NSString *outfile);

J2OBJC_TYPE_LITERAL_HEADER(AppBaseBase64)

@compatibility_alias BrComMobilemindJ2objcUtilBase64 AppBaseBase64;

@interface AppBaseBase64_InputStream : JavaIoFilterInputStream

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                            withInt:(jint)options;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)dest
                  withInt:(jint)off
                  withInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(AppBaseBase64_InputStream)

FOUNDATION_EXPORT void AppBaseBase64_InputStream_initWithJavaIoInputStream_(AppBaseBase64_InputStream *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT AppBaseBase64_InputStream *new_AppBaseBase64_InputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AppBaseBase64_InputStream *create_AppBaseBase64_InputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(AppBaseBase64_InputStream *self, JavaIoInputStream *inArg, jint options);

FOUNDATION_EXPORT AppBaseBase64_InputStream *new_AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint options) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AppBaseBase64_InputStream *create_AppBaseBase64_InputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint options);

J2OBJC_TYPE_LITERAL_HEADER(AppBaseBase64_InputStream)

@interface AppBaseBase64_OutputStream : JavaIoFilterOutputStream

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                             withInt:(jint)options;

- (void)close;

- (void)flushBase64;

- (void)resumeEncoding;

- (void)suspendEncoding;

- (void)writeWithByteArray:(IOSByteArray *)theBytes
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)theByte;

@end

J2OBJC_EMPTY_STATIC_INIT(AppBaseBase64_OutputStream)

FOUNDATION_EXPORT void AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(AppBaseBase64_OutputStream *self, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT AppBaseBase64_OutputStream *new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AppBaseBase64_OutputStream *create_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg);

FOUNDATION_EXPORT void AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(AppBaseBase64_OutputStream *self, JavaIoOutputStream *outArg, jint options);

FOUNDATION_EXPORT AppBaseBase64_OutputStream *new_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *outArg, jint options) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AppBaseBase64_OutputStream *create_AppBaseBase64_OutputStream_initWithJavaIoOutputStream_withInt_(JavaIoOutputStream *outArg, jint options);

J2OBJC_TYPE_LITERAL_HEADER(AppBaseBase64_OutputStream)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Base64_H
