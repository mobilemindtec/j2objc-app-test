//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/ExceptionHandler.java
//

#include "ExceptionHandler.h"
#include "HttpException.h"
#include "J2ObjC_source.h"
#include "Response.h"
#include "Transformer.h"
#include "java/lang/Exception.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/net/SocketTimeoutException.h"

@implementation AppBaseExceptionHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AppBaseExceptionHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangThrowable *)handleWithJavaLangException:(JavaLangException *)e {
  return AppBaseExceptionHandler_handleWithJavaLangException_(e);
}

+ (NSString *)handleWithBrComMobilemindJ2objcHttpResponse:(BrComMobilemindJ2objcHttpResponse *)response {
  return AppBaseExceptionHandler_handleWithBrComMobilemindJ2objcHttpResponse_(response);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(handleWithJavaLangException:);
  methods[2].selector = @selector(handleWithBrComMobilemindJ2objcHttpResponse:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handle", "LJavaLangException;", "LBrComMobilemindJ2objcHttpResponse;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _AppBaseExceptionHandler = { "ExceptionHandler", "br.com.mobilemind.j2objc.util", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AppBaseExceptionHandler;
}

@end

void AppBaseExceptionHandler_init(AppBaseExceptionHandler *self) {
  NSObject_init(self);
}

AppBaseExceptionHandler *new_AppBaseExceptionHandler_init() {
  J2OBJC_NEW_IMPL(AppBaseExceptionHandler, init)
}

AppBaseExceptionHandler *create_AppBaseExceptionHandler_init() {
  J2OBJC_CREATE_IMPL(AppBaseExceptionHandler, init)
}

JavaLangThrowable *AppBaseExceptionHandler_handleWithJavaLangException_(JavaLangException *e) {
  AppBaseExceptionHandler_initialize();
  JavaLangThrowable *throwable = e;
  if ([e isKindOfClass:[JavaLangNullPointerException class]]) return new_JavaLangNullPointerException_initWithNSString_(@"NullPointerException");
  if ([((JavaLangException *) nil_chk(e)) getCause] != nil && [e isKindOfClass:[BrComMobilemindJ2objcHttpHttpException class]]) throwable = [e getCause];
  if ([throwable isKindOfClass:[JavaNetSocketTimeoutException class]]) return new_BrComMobilemindJ2objcHttpHttpException_initWithInt_withNSString_(408, @"O servidor parece estar off-line. Tente novamente mais tarde.");
  return throwable;
}

NSString *AppBaseExceptionHandler_handleWithBrComMobilemindJ2objcHttpResponse_(BrComMobilemindJ2objcHttpResponse *response) {
  AppBaseExceptionHandler_initialize();
  NSString *contentError = [((BrComMobilemindJ2objcHttpTransformer *) nil_chk([((BrComMobilemindJ2objcHttpResponse *) nil_chk(response)) transformer])) errorString];
  if ([((NSString *) nil_chk(contentError)) java_contains:@"network connection not found"]) {
    contentError = @"Verifique sua conex\u00e3o com a internet.";
  }
  else if ([contentError java_contains:@"unauthorized"] || [contentError java_contains:@"bad credentials"] || [response getHttpStatus] == 401) {
    contentError = @"Acesso Negado. Verifique seus dados de acesso.";
  }
  else if ([contentError java_contains:@"conneciton refused"]) {
    contentError = @"O servidor parece estar off-line. Tente novamente mais tarde.";
  }
  else if ([contentError java_contains:@"timeout"]) {
    contentError = @"O servidor demorou para responder. Tente novamente mais tarde.";
  }
  return contentError;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AppBaseExceptionHandler)

J2OBJC_NAME_MAPPING(AppBaseExceptionHandler, "br.com.mobilemind.j2objc.util", "AppBase")
