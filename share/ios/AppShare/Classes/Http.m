//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Http.java
//

#include "Http.h"
#include "HttpException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Request.h"
#include "Response.h"
#include "Transformer.h"
#include "java/io/DataOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"

@interface BrComMobilemindJ2objcHttpHttp () {
 @public
  jint timeout_;
  BrComMobilemindJ2objcHttpTransformer *transformer_;
}

- (JavaNetHttpURLConnection *)getHttpConnectionWithBrComMobilemindJ2objcHttpRequest:(BrComMobilemindJ2objcHttpRequest *)request;

@end

J2OBJC_FIELD_SETTER(BrComMobilemindJ2objcHttpHttp, transformer_, BrComMobilemindJ2objcHttpTransformer *)

__attribute__((unused)) static JavaNetHttpURLConnection *BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(BrComMobilemindJ2objcHttpHttp *self, BrComMobilemindJ2objcHttpRequest *request);

__attribute__((unused)) static IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$5(void);

J2OBJC_INITIALIZED_DEFN(BrComMobilemindJ2objcHttpHttp)

JavaUtilLoggingLogger *BrComMobilemindJ2objcHttpHttp_logger;

@implementation BrComMobilemindJ2objcHttpHttp

+ (JavaUtilLoggingLogger *)logger {
  return BrComMobilemindJ2objcHttpHttp_logger;
}

- (instancetype)initWithInt:(jint)timeout
withBrComMobilemindJ2objcHttpTransformer:(BrComMobilemindJ2objcHttpTransformer *)transformer {
  BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(self, timeout, transformer);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  BrComMobilemindJ2objcHttpHttp_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBrComMobilemindJ2objcHttpTransformer:(BrComMobilemindJ2objcHttpTransformer *)transformer {
  BrComMobilemindJ2objcHttpHttp_initWithBrComMobilemindJ2objcHttpTransformer_(self, transformer);
  return self;
}

- (instancetype)initWithInt:(jint)timeout {
  BrComMobilemindJ2objcHttpHttp_initWithInt_(self, timeout);
  return self;
}

- (BrComMobilemindJ2objcHttpResponse *)getWithNSString:(NSString *)url {
  return [self getWithNSString:url withJavaUtilMap:new_JavaUtilHashMap_init()];
}

- (BrComMobilemindJ2objcHttpResponse *)getWithNSString:(NSString *)url
                                       withJavaUtilMap:(id<JavaUtilMap>)headers {
  BrComMobilemindJ2objcHttpRequest *request = new_BrComMobilemindJ2objcHttpRequest_initWithNSString_withJavaUtilMap_(url, headers);
  JavaNetHttpURLConnection *httpConnection = nil;
  @try {
    httpConnection = BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(self, request);
    [((JavaNetHttpURLConnection *) nil_chk(httpConnection)) setRequestMethodWithNSString:@"GET"];
    [httpConnection connect];
    BrComMobilemindJ2objcHttpResponse *response = new_BrComMobilemindJ2objcHttpResponse_initWithInt_([httpConnection getResponseCode]);
    [((BrComMobilemindJ2objcHttpTransformer *) nil_chk(self->transformer_)) setResponseWithBrComMobilemindJ2objcHttpResponse:response];
    [response setEntityWithJavaIoInputStream:[httpConnection getInputStream]];
    [response setErrorWithJavaIoInputStream:[httpConnection getErrorStream]];
    for (NSString * __strong fieldName in nil_chk([((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) keySet])) {
      id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) getWithId:fieldName];
      if (![((id<JavaUtilList>) nil_chk(values)) isEmpty]) (void) [((id<JavaUtilMap>) nil_chk([response getHeaders])) putWithId:fieldName withId:[nil_chk([values getWithInt:0]) description]];
    }
    return response;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(BrComMobilemindJ2objcHttpHttp_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e getMessage] withJavaLangThrowable:e];
    @throw new_BrComMobilemindJ2objcHttpHttpException_initWithInt_withNSString_withJavaLangException_(-1, [e getMessage], e);
  }
  @finally {
    if (httpConnection != nil) [httpConnection disconnect];
  }
}

- (BrComMobilemindJ2objcHttpResponse *)postWithNSString:(NSString *)url
                                                 withId:(id)body
                                        withJavaUtilMap:(id<JavaUtilMap>)headers {
  BrComMobilemindJ2objcHttpRequest *request = new_BrComMobilemindJ2objcHttpRequest_initWithNSString_withId_withJavaUtilMap_(url, body, headers);
  JavaNetHttpURLConnection *httpConnection = nil;
  @try {
    httpConnection = BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(self, request);
    [((JavaNetHttpURLConnection *) nil_chk(httpConnection)) setDoOutputWithBoolean:true];
    [httpConnection setRequestMethodWithNSString:@"POST"];
    NSString *bodyContent = [nil_chk([request getBody]) description];
    IOSByteArray *postData = [((NSString *) nil_chk(bodyContent)) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
    jint postDataLength = ((IOSByteArray *) nil_chk(postData))->size_;
    [httpConnection setRequestPropertyWithNSString:@"Content-Length" withNSString:JavaLangInteger_toStringWithInt_(postDataLength)];
    JavaIoDataOutputStream *dataWriter = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_([httpConnection getOutputStream]);
    [dataWriter writeWithByteArray:postData];
    [dataWriter flush];
    [dataWriter close];
    [httpConnection connect];
    BrComMobilemindJ2objcHttpResponse *response = new_BrComMobilemindJ2objcHttpResponse_initWithInt_([httpConnection getResponseCode]);
    [((BrComMobilemindJ2objcHttpTransformer *) nil_chk(self->transformer_)) setResponseWithBrComMobilemindJ2objcHttpResponse:response];
    [response setEntityWithJavaIoInputStream:[httpConnection getInputStream]];
    [response setErrorWithJavaIoInputStream:[httpConnection getErrorStream]];
    for (NSString * __strong fieldName in nil_chk([((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) keySet])) {
      id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) getWithId:fieldName];
      if (![((id<JavaUtilList>) nil_chk(values)) isEmpty]) (void) [((id<JavaUtilMap>) nil_chk([response getHeaders])) putWithId:fieldName withId:[nil_chk([values getWithInt:0]) description]];
    }
    return response;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(BrComMobilemindJ2objcHttpHttp_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e getMessage] withJavaLangThrowable:e];
    @throw new_BrComMobilemindJ2objcHttpHttpException_initWithInt_withNSString_withJavaLangException_(-1, [e getMessage], e);
  }
  @finally {
    if (httpConnection != nil) [httpConnection disconnect];
  }
}

- (BrComMobilemindJ2objcHttpResponse *)putWithNSString:(NSString *)url
                                                withId:(id)body
                                       withJavaUtilMap:(id<JavaUtilMap>)headers {
  BrComMobilemindJ2objcHttpRequest *request = new_BrComMobilemindJ2objcHttpRequest_initWithNSString_withId_withJavaUtilMap_(url, body, headers);
  JavaNetHttpURLConnection *httpConnection = nil;
  @try {
    httpConnection = BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(self, request);
    [((JavaNetHttpURLConnection *) nil_chk(httpConnection)) setDoOutputWithBoolean:true];
    [httpConnection setRequestMethodWithNSString:@"PUT"];
    NSString *bodyContent = [nil_chk([request getBody]) description];
    IOSByteArray *postData = [((NSString *) nil_chk(bodyContent)) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
    jint postDataLength = ((IOSByteArray *) nil_chk(postData))->size_;
    [httpConnection setRequestPropertyWithNSString:@"Content-Length" withNSString:JavaLangInteger_toStringWithInt_(postDataLength)];
    JavaIoDataOutputStream *dataWriter = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_([httpConnection getOutputStream]);
    [dataWriter writeWithByteArray:postData];
    [dataWriter flush];
    [dataWriter close];
    [httpConnection connect];
    BrComMobilemindJ2objcHttpResponse *response = new_BrComMobilemindJ2objcHttpResponse_initWithInt_([httpConnection getResponseCode]);
    [((BrComMobilemindJ2objcHttpTransformer *) nil_chk(self->transformer_)) setResponseWithBrComMobilemindJ2objcHttpResponse:response];
    [response setEntityWithJavaIoInputStream:[httpConnection getInputStream]];
    [response setErrorWithJavaIoInputStream:[httpConnection getErrorStream]];
    for (NSString * __strong fieldName in nil_chk([((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) keySet])) {
      id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) getWithId:fieldName];
      if (![((id<JavaUtilList>) nil_chk(values)) isEmpty]) (void) [((id<JavaUtilMap>) nil_chk([response getHeaders])) putWithId:fieldName withId:[nil_chk([values getWithInt:0]) description]];
    }
    return response;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(BrComMobilemindJ2objcHttpHttp_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e getMessage] withJavaLangThrowable:e];
    @throw new_BrComMobilemindJ2objcHttpHttpException_initWithInt_withNSString_withJavaLangException_(-1, [e getMessage], e);
  }
  @finally {
    if (httpConnection != nil) [httpConnection disconnect];
  }
}

- (BrComMobilemindJ2objcHttpResponse *)delete__WithNSString:(NSString *)url
                                                     withId:(id)body
                                            withJavaUtilMap:(id<JavaUtilMap>)headers {
  BrComMobilemindJ2objcHttpRequest *request = new_BrComMobilemindJ2objcHttpRequest_initWithNSString_withId_withJavaUtilMap_(url, body, headers);
  JavaNetHttpURLConnection *httpConnection = nil;
  @try {
    httpConnection = BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(self, request);
    [((JavaNetHttpURLConnection *) nil_chk(httpConnection)) setDoOutputWithBoolean:true];
    [httpConnection setRequestMethodWithNSString:@"PUT"];
    NSString *bodyContent = [nil_chk([request getBody]) description];
    IOSByteArray *postData = [((NSString *) nil_chk(bodyContent)) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
    jint postDataLength = ((IOSByteArray *) nil_chk(postData))->size_;
    [httpConnection setRequestPropertyWithNSString:@"Content-Length" withNSString:JavaLangInteger_toStringWithInt_(postDataLength)];
    JavaIoDataOutputStream *dataWriter = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_([httpConnection getOutputStream]);
    [dataWriter writeWithByteArray:postData];
    [dataWriter flush];
    [dataWriter close];
    [httpConnection connect];
    BrComMobilemindJ2objcHttpResponse *response = new_BrComMobilemindJ2objcHttpResponse_initWithInt_([httpConnection getResponseCode]);
    [((BrComMobilemindJ2objcHttpTransformer *) nil_chk(self->transformer_)) setResponseWithBrComMobilemindJ2objcHttpResponse:response];
    [response setEntityWithJavaIoInputStream:[httpConnection getInputStream]];
    [response setErrorWithJavaIoInputStream:[httpConnection getErrorStream]];
    for (NSString * __strong fieldName in nil_chk([((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) keySet])) {
      id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk([httpConnection getHeaderFields])) getWithId:fieldName];
      if (![((id<JavaUtilList>) nil_chk(values)) isEmpty]) (void) [((id<JavaUtilMap>) nil_chk([response getHeaders])) putWithId:fieldName withId:[nil_chk([values getWithInt:0]) description]];
    }
    return response;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(BrComMobilemindJ2objcHttpHttp_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e getMessage] withJavaLangThrowable:e];
    @throw new_BrComMobilemindJ2objcHttpHttpException_initWithInt_withNSString_withJavaLangException_(-1, [e getMessage], e);
  }
  @finally {
    if (httpConnection != nil) [httpConnection disconnect];
  }
}

- (JavaNetHttpURLConnection *)getHttpConnectionWithBrComMobilemindJ2objcHttpRequest:(BrComMobilemindJ2objcHttpRequest *)request {
  return BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(self, request);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LBrComMobilemindJ2objcHttpResponse;", 0x1, 3, 4, -1, -1, -1, 5 },
    { NULL, "LBrComMobilemindJ2objcHttpResponse;", 0x1, 3, 6, -1, 7, -1, 8 },
    { NULL, "LBrComMobilemindJ2objcHttpResponse;", 0x1, 9, 10, -1, 11, -1, 12 },
    { NULL, "LBrComMobilemindJ2objcHttpResponse;", 0x1, 13, 10, -1, 11, -1, 14 },
    { NULL, "LBrComMobilemindJ2objcHttpResponse;", 0x1, 15, 10, -1, 11, -1, 16 },
    { NULL, "LJavaNetHttpURLConnection;", 0x2, 17, 18, 19, -1, -1, 20 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withBrComMobilemindJ2objcHttpTransformer:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithBrComMobilemindJ2objcHttpTransformer:);
  methods[3].selector = @selector(initWithInt:);
  methods[4].selector = @selector(getWithNSString:);
  methods[5].selector = @selector(getWithNSString:withJavaUtilMap:);
  methods[6].selector = @selector(postWithNSString:withId:withJavaUtilMap:);
  methods[7].selector = @selector(putWithNSString:withId:withJavaUtilMap:);
  methods[8].selector = @selector(delete__WithNSString:withId:withJavaUtilMap:);
  methods[9].selector = @selector(getHttpConnectionWithBrComMobilemindJ2objcHttpRequest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1c, -1, 21, -1, -1 },
    { "timeout_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transformer_", "LBrComMobilemindJ2objcHttpTransformer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILBrComMobilemindJ2objcHttpTransformer;", "LBrComMobilemindJ2objcHttpTransformer;", "I", "get", "LNSString;", (void *)&BrComMobilemindJ2objcHttpHttp__Annotations$0, "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Lbr/com/mobilemind/j2objc/http/Response;", (void *)&BrComMobilemindJ2objcHttpHttp__Annotations$1, "post", "LNSString;LNSObject;LJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Lbr/com/mobilemind/j2objc/http/Response;", (void *)&BrComMobilemindJ2objcHttpHttp__Annotations$2, "put", (void *)&BrComMobilemindJ2objcHttpHttp__Annotations$3, "delete", (void *)&BrComMobilemindJ2objcHttpHttp__Annotations$4, "getHttpConnection", "LBrComMobilemindJ2objcHttpRequest;", "LJavaIoIOException;", (void *)&BrComMobilemindJ2objcHttpHttp__Annotations$5, &BrComMobilemindJ2objcHttpHttp_logger };
  static const J2ObjcClassInfo _BrComMobilemindJ2objcHttpHttp = { "Http", "br.com.mobilemind.j2objc.http", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_BrComMobilemindJ2objcHttpHttp;
}

+ (void)initialize {
  if (self == [BrComMobilemindJ2objcHttpHttp class]) {
    BrComMobilemindJ2objcHttpHttp_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([BrComMobilemindJ2objcHttpHttp_class_() getName]);
    J2OBJC_SET_INITIALIZED(BrComMobilemindJ2objcHttpHttp)
  }
}

@end

void BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(BrComMobilemindJ2objcHttpHttp *self, jint timeout, BrComMobilemindJ2objcHttpTransformer *transformer) {
  NSObject_init(self);
  self->timeout_ = timeout;
  self->transformer_ = transformer;
}

BrComMobilemindJ2objcHttpHttp *new_BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(jint timeout, BrComMobilemindJ2objcHttpTransformer *transformer) {
  J2OBJC_NEW_IMPL(BrComMobilemindJ2objcHttpHttp, initWithInt_withBrComMobilemindJ2objcHttpTransformer_, timeout, transformer)
}

BrComMobilemindJ2objcHttpHttp *create_BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(jint timeout, BrComMobilemindJ2objcHttpTransformer *transformer) {
  J2OBJC_CREATE_IMPL(BrComMobilemindJ2objcHttpHttp, initWithInt_withBrComMobilemindJ2objcHttpTransformer_, timeout, transformer)
}

void BrComMobilemindJ2objcHttpHttp_init(BrComMobilemindJ2objcHttpHttp *self) {
  BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(self, 5000, new_BrComMobilemindJ2objcHttpTransformer_init());
}

BrComMobilemindJ2objcHttpHttp *new_BrComMobilemindJ2objcHttpHttp_init() {
  J2OBJC_NEW_IMPL(BrComMobilemindJ2objcHttpHttp, init)
}

BrComMobilemindJ2objcHttpHttp *create_BrComMobilemindJ2objcHttpHttp_init() {
  J2OBJC_CREATE_IMPL(BrComMobilemindJ2objcHttpHttp, init)
}

void BrComMobilemindJ2objcHttpHttp_initWithBrComMobilemindJ2objcHttpTransformer_(BrComMobilemindJ2objcHttpHttp *self, BrComMobilemindJ2objcHttpTransformer *transformer) {
  BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(self, 5000, transformer);
}

BrComMobilemindJ2objcHttpHttp *new_BrComMobilemindJ2objcHttpHttp_initWithBrComMobilemindJ2objcHttpTransformer_(BrComMobilemindJ2objcHttpTransformer *transformer) {
  J2OBJC_NEW_IMPL(BrComMobilemindJ2objcHttpHttp, initWithBrComMobilemindJ2objcHttpTransformer_, transformer)
}

BrComMobilemindJ2objcHttpHttp *create_BrComMobilemindJ2objcHttpHttp_initWithBrComMobilemindJ2objcHttpTransformer_(BrComMobilemindJ2objcHttpTransformer *transformer) {
  J2OBJC_CREATE_IMPL(BrComMobilemindJ2objcHttpHttp, initWithBrComMobilemindJ2objcHttpTransformer_, transformer)
}

void BrComMobilemindJ2objcHttpHttp_initWithInt_(BrComMobilemindJ2objcHttpHttp *self, jint timeout) {
  BrComMobilemindJ2objcHttpHttp_initWithInt_withBrComMobilemindJ2objcHttpTransformer_(self, timeout, new_BrComMobilemindJ2objcHttpTransformer_init());
}

BrComMobilemindJ2objcHttpHttp *new_BrComMobilemindJ2objcHttpHttp_initWithInt_(jint timeout) {
  J2OBJC_NEW_IMPL(BrComMobilemindJ2objcHttpHttp, initWithInt_, timeout)
}

BrComMobilemindJ2objcHttpHttp *create_BrComMobilemindJ2objcHttpHttp_initWithInt_(jint timeout) {
  J2OBJC_CREATE_IMPL(BrComMobilemindJ2objcHttpHttp, initWithInt_, timeout)
}

JavaNetHttpURLConnection *BrComMobilemindJ2objcHttpHttp_getHttpConnectionWithBrComMobilemindJ2objcHttpRequest_(BrComMobilemindJ2objcHttpHttp *self, BrComMobilemindJ2objcHttpRequest *request) {
  [((JavaUtilLoggingLogger *) nil_chk(BrComMobilemindJ2objcHttpHttp_logger)) infoWithNSString:JreStrcat("$$", @"HTTP CONNECT: ", [((BrComMobilemindJ2objcHttpRequest *) nil_chk(request)) getUrl])];
  JavaNetURL *url = new_JavaNetURL_initWithNSString_([request getUrl]);
  JavaNetHttpURLConnection *conn = (JavaNetHttpURLConnection *) cast_chk([url openConnection], [JavaNetHttpURLConnection class]);
  for (NSString * __strong name in nil_chk([((id<JavaUtilMap>) nil_chk([request getHeaders])) keySet])) {
    [((JavaNetHttpURLConnection *) nil_chk(conn)) setRequestPropertyWithNSString:name withNSString:[((id<JavaUtilMap>) nil_chk([request getHeaders])) getWithId:name]];
  }
  [((JavaNetHttpURLConnection *) nil_chk(conn)) setInstanceFollowRedirectsWithBoolean:false];
  [conn setRequestPropertyWithNSString:@"charset" withNSString:@"utf-8"];
  [conn setUseCachesWithBoolean:false];
  [conn setConnectTimeoutWithInt:self->timeout_];
  [conn setReadTimeoutWithInt:self->timeout_];
  [conn setAllowUserInteractionWithBoolean:false];
  return conn;
}

IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *BrComMobilemindJ2objcHttpHttp__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BrComMobilemindJ2objcHttpHttp)
