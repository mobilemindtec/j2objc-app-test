//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/PreferencesImpl.java
//

#include "J2ObjC_source.h"
#include "PreferencesImpl.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface IOSPreferencesImpl () {
 @public
  JavaUtilLinkedList *list_;
}

@end

J2OBJC_FIELD_SETTER(IOSPreferencesImpl, list_, JavaUtilLinkedList *)

@implementation IOSPreferencesImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IOSPreferencesImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)hasKeyWithNSString:(NSString *)keyName {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  return [preferences objectForKey:keyName];
}

- (jboolean)setStringWithNSString:(NSString *)keyName
                     withNSString:(NSString *)value {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  [preferences setValue:value forKey:keyName];
  return [preferences synchronize];
}

- (NSString *)getStringWithNSString:(NSString *)keyName {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  if ([preferences objectForKey:keyName] != nil){
    return [preferences stringForKey:keyName];
  }
  return nil;
}

- (jboolean)setIntWithNSString:(NSString *)keyName
                       withInt:(jint)value {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  [preferences setInteger:value forKey:keyName];
  return [preferences synchronize];
}

- (jint)getIntWithNSString:(NSString *)keyName {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  if ([preferences objectForKey:keyName] != nil){
    return [preferences integerForKey:keyName];
  }
  return -1;
}

- (jboolean)setBoolWithNSString:(NSString *)keyName
                    withBoolean:(jboolean)value {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  [preferences setBool:value forKey:keyName];
  return [preferences synchronize];
}

- (jboolean)getBoolWithNSString:(NSString *)keyName {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  if ([preferences objectForKey:keyName] != nil){
    return [preferences boolForKey:keyName];
  }
  return false;
}

- (void)removeWithNSString:(NSString *)keyName {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  [preferences removeObjectForKey: keyName];
}

- (void)clear {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  NSDictionary *defaultsDictionary = [preferences dictionaryRepresentation];
  for (NSString *key in [defaultsDictionary allKeys]) {
    [[NSUserDefaults standardUserDefaults] removeObjectForKey:key];
  }
}

- (id<JavaUtilList>)allKeys {
  NSUserDefaults *preferences = [NSUserDefaults standardUserDefaults];
  NSDictionary *defaultsDictionary = [ preferences dictionaryRepresentation];
  id<JavaUtilList> items = new_JavaUtilLinkedList_init();
  for (NSString *key in [defaultsDictionary allKeys]) {
    [items addWithId:key];
  }
  return items;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x101, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x101, 7, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x101, -1, -1, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hasKeyWithNSString:);
  methods[2].selector = @selector(setStringWithNSString:withNSString:);
  methods[3].selector = @selector(getStringWithNSString:);
  methods[4].selector = @selector(setIntWithNSString:withInt:);
  methods[5].selector = @selector(getIntWithNSString:);
  methods[6].selector = @selector(setBoolWithNSString:withBoolean:);
  methods[7].selector = @selector(getBoolWithNSString:);
  methods[8].selector = @selector(removeWithNSString:);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(allKeys);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "list_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "hasKey", "LNSString;", "setString", "LNSString;LNSString;", "getString", "setInt", "LNSString;I", "getInt", "setBool", "LNSString;Z", "getBool", "remove", "()Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IOSPreferencesImpl = { "PreferencesImpl", "br.com.mobilemind.j2objc.shared.ios", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_IOSPreferencesImpl;
}

@end

void IOSPreferencesImpl_init(IOSPreferencesImpl *self) {
  NSObject_init(self);
}

IOSPreferencesImpl *new_IOSPreferencesImpl_init() {
  J2OBJC_NEW_IMPL(IOSPreferencesImpl, init)
}

IOSPreferencesImpl *create_IOSPreferencesImpl_init() {
  J2OBJC_CREATE_IMPL(IOSPreferencesImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IOSPreferencesImpl)

J2OBJC_NAME_MAPPING(IOSPreferencesImpl, "br.com.mobilemind.j2objc.shared.ios", "IOS")
