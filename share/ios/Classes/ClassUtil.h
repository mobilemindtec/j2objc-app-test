//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/ClassUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ClassUtil")
#ifdef RESTRICT_ClassUtil
#define INCLUDE_ALL_ClassUtil 0
#else
#define INCLUDE_ALL_ClassUtil 1
#endif
#undef RESTRICT_ClassUtil

#if !defined (AppBaseClassUtil_) && (INCLUDE_ALL_ClassUtil || defined(INCLUDE_AppBaseClassUtil))
#define AppBaseClassUtil_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectField;
@class JavaLangReflectMethod;
@protocol JavaUtilList;

@interface AppBaseClassUtil : NSObject

+ (jint)GET_METHOD;

+ (jint)SET_METHOD;

+ (jint)ANY_METHOD;

#pragma mark Public

- (instancetype)init;

+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)v;

+ (id<JavaUtilList>)getAllBeanMethodsWithIOSClass:(IOSClass *)clazz
                                          withInt:(jint)type;

+ (void)getAllBeanMethodsWithIOSClass:(IOSClass *)clazz
                     withJavaUtilList:(id<JavaUtilList>)list
                              withInt:(jint)type;

+ (id<JavaUtilList>)getAllFieldsWithIOSClass:(IOSClass *)clazz;

+ (JavaLangReflectField *)getAnnotatedFieldWithIOSClass:(IOSClass *)clazz
                                           withIOSClass:(IOSClass *)annotation
                                           withNSString:(NSString *)field;

+ (id<JavaUtilList>)getAnnotatedsFieldsWithIOSClass:(IOSClass *)clazz
                                       withIOSClass:(IOSClass *)annotation;

+ (IOSObjectArray *)getColumnsFrooModelWithIOSClass:(IOSClass *)modelClass
                                  withNSStringArray:(IOSObjectArray *)ignoreFields;

+ (JavaLangReflectField *)getFieldWithIOSClass:(IOSClass *)clazz
                                  withNSString:(NSString *)fieldName;

+ (JavaLangReflectMethod *)getGetMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)setMethod
                                  withJavaLangReflectMethodArray:(IOSObjectArray *)ms;

+ (JavaLangReflectMethod *)getGetMethodWithNSString:(NSString *)fieldName
                                       withIOSClass:(IOSClass *)clazz;

+ (JavaLangReflectMethod *)getSetMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)getMethod
                                                withJavaUtilList:(id<JavaUtilList>)ms;

+ (JavaLangReflectMethod *)getSetMethodWithNSString:(NSString *)fieldName
                                       withIOSClass:(IOSClass *)clazz;

+ (NSString *)getTypeNameWithIOSClass:(IOSClass *)type;

+ (jboolean)isAssignableFromWithIOSClass:(IOSClass *)source
                            withIOSClass:(IOSClass *)assigned;

+ (jboolean)isBooleanWithId:(id)o;

+ (jboolean)isByteArrayWithId:(id)o;

+ (jboolean)isCompatibleMethodsWithNSString:(NSString *)methodGet
                               withNSString:(NSString *)methodSet;

+ (jboolean)isDateWithId:(id)o;

+ (jboolean)isDoubleWithId:(id)o;

+ (jboolean)isGetMethodWithNSString:(NSString *)method;

+ (jboolean)isIntegerWithId:(id)o;

+ (jboolean)isLongWithId:(id)o;

+ (jboolean)isPrimitiveWithId:(id)obj;

+ (jboolean)isSetMethodWithNSString:(NSString *)method;

+ (jboolean)isStringWithId:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(AppBaseClassUtil)

inline jint AppBaseClassUtil_get_GET_METHOD(void);
#define AppBaseClassUtil_GET_METHOD 0
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseClassUtil, GET_METHOD, jint)

inline jint AppBaseClassUtil_get_SET_METHOD(void);
#define AppBaseClassUtil_SET_METHOD 1
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseClassUtil, SET_METHOD, jint)

inline jint AppBaseClassUtil_get_ANY_METHOD(void);
#define AppBaseClassUtil_ANY_METHOD 2
J2OBJC_STATIC_FIELD_CONSTANT(AppBaseClassUtil, ANY_METHOD, jint)

FOUNDATION_EXPORT void AppBaseClassUtil_init(AppBaseClassUtil *self);

FOUNDATION_EXPORT AppBaseClassUtil *new_AppBaseClassUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AppBaseClassUtil *create_AppBaseClassUtil_init(void);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isAssignableFromWithIOSClass_withIOSClass_(IOSClass *source, IOSClass *assigned);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isStringWithId_(id o);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isIntegerWithId_(id o);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isDoubleWithId_(id o);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isLongWithId_(id o);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isBooleanWithId_(id o);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isDateWithId_(id o);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isByteArrayWithId_(id o);

FOUNDATION_EXPORT id<JavaUtilList> AppBaseClassUtil_getAnnotatedsFieldsWithIOSClass_withIOSClass_(IOSClass *clazz, IOSClass *annotation);

FOUNDATION_EXPORT JavaLangReflectField *AppBaseClassUtil_getAnnotatedFieldWithIOSClass_withIOSClass_withNSString_(IOSClass *clazz, IOSClass *annotation, NSString *field);

FOUNDATION_EXPORT id<JavaUtilList> AppBaseClassUtil_getAllFieldsWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT JavaLangReflectField *AppBaseClassUtil_getFieldWithIOSClass_withNSString_(IOSClass *clazz, NSString *fieldName);

FOUNDATION_EXPORT id<JavaUtilList> AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withInt_(IOSClass *clazz, jint type);

FOUNDATION_EXPORT void AppBaseClassUtil_getAllBeanMethodsWithIOSClass_withJavaUtilList_withInt_(IOSClass *clazz, id<JavaUtilList> list, jint type);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isCompatibleMethodsWithNSString_withNSString_(NSString *methodGet, NSString *methodSet);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isSetMethodWithNSString_(NSString *method);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isGetMethodWithNSString_(NSString *method);

FOUNDATION_EXPORT JavaLangReflectMethod *AppBaseClassUtil_getGetMethodWithNSString_withIOSClass_(NSString *fieldName, IOSClass *clazz);

FOUNDATION_EXPORT JavaLangReflectMethod *AppBaseClassUtil_getGetMethodWithJavaLangReflectMethod_withJavaLangReflectMethodArray_(JavaLangReflectMethod *setMethod, IOSObjectArray *ms);

FOUNDATION_EXPORT JavaLangReflectMethod *AppBaseClassUtil_getSetMethodWithNSString_withIOSClass_(NSString *fieldName, IOSClass *clazz);

FOUNDATION_EXPORT JavaLangReflectMethod *AppBaseClassUtil_getSetMethodWithJavaLangReflectMethod_withJavaUtilList_(JavaLangReflectMethod *getMethod, id<JavaUtilList> ms);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_isPrimitiveWithId_(id obj);

FOUNDATION_EXPORT NSString *AppBaseClassUtil_getTypeNameWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT IOSObjectArray *AppBaseClassUtil_getColumnsFrooModelWithIOSClass_withNSStringArray_(IOSClass *modelClass, IOSObjectArray *ignoreFields);

FOUNDATION_EXPORT jboolean AppBaseClassUtil_containsWithNSObjectArray_withId_(IOSObjectArray *array, id v);

J2OBJC_TYPE_LITERAL_HEADER(AppBaseClassUtil)

@compatibility_alias BrComMobilemindJ2objcUtilClassUtil AppBaseClassUtil;

#endif

#pragma pop_macro("INCLUDE_ALL_ClassUtil")
